{"ast":null,"code":"import _defineProperty from\"@babel/runtime/helpers/defineProperty\";import _asyncToGenerator from\"@babel/runtime/helpers/asyncToGenerator\";function ownKeys(e,r){var t=Object.keys(e);if(Object.getOwnPropertySymbols){var o=Object.getOwnPropertySymbols(e);r&&(o=o.filter(function(r){return Object.getOwnPropertyDescriptor(e,r).enumerable;})),t.push.apply(t,o);}return t;}function _objectSpread(e){for(var r=1;r<arguments.length;r++){var t=null!=arguments[r]?arguments[r]:{};r%2?ownKeys(Object(t),!0).forEach(function(r){_defineProperty(e,r,t[r]);}):Object.getOwnPropertyDescriptors?Object.defineProperties(e,Object.getOwnPropertyDescriptors(t)):ownKeys(Object(t)).forEach(function(r){Object.defineProperty(e,r,Object.getOwnPropertyDescriptor(t,r));});}return e;}import{clientAPI}from\"../services/api\";export var loadApplicationDocumentDates=function(){var _ref=_asyncToGenerator(function*(cid){try{var dates=yield clientAPI.getDocumentDates(cid);var filteredDates=[];for(var dateInfo of dates){var documents=yield clientAPI.getDocumentsByDate(cid,dateInfo.date);var applicationDocs=documents.filter(function(doc){return!['pdf','signed-promissory-note'].some(function(keyword){return doc.type.includes(keyword)||doc.name.toLowerCase().includes(keyword)||doc.displayName.toLowerCase().includes(keyword);});});if(applicationDocs.length>0){filteredDates.push(_objectSpread(_objectSpread({},dateInfo),{},{documentCount:applicationDocs.length}));}}return filteredDates;}catch(error){console.error('Error loading document dates:',error);throw new Error('Failed to load document dates');}});return function loadApplicationDocumentDates(_x){return _ref.apply(this,arguments);};}();export var loadSignedDocumentDates=function(){var _ref2=_asyncToGenerator(function*(cid){try{var dates=yield clientAPI.getDocumentDates(cid);var datesWithSignedDocs=[];for(var dateInfo of dates){var documents=yield clientAPI.getDocumentsByDate(cid,dateInfo.date);var signedDocs=documents.filter(function(doc){var name=(doc.name||'').toLowerCase();var displayName=(doc.displayName||'').toLowerCase();var type=(doc.type||'').toLowerCase();var isPDF=type.includes('pdf')||name.endsWith('.pdf')||displayName.endsWith('.pdf');var isPromissoryNote=name.includes('signed-promissory-note')||displayName.includes('signed-promissory note');return isPDF||isPromissoryNote;});if(signedDocs.length>0){datesWithSignedDocs.push(_objectSpread(_objectSpread({},dateInfo),{},{documentCount:signedDocs.length}));}}return datesWithSignedDocs;}catch(error){console.error('Error loading signed document dates:',error);throw new Error('Failed to load signed document dates');}});return function loadSignedDocumentDates(_x2){return _ref2.apply(this,arguments);};}();export var getApplicationDocuments=function(){var _ref3=_asyncToGenerator(function*(cid,selectedDate){try{var documents=yield clientAPI.getDocumentsByDate(cid,selectedDate);return documents.filter(function(doc){return!['pdf','signed-promissory-note'].some(function(keyword){return doc.type.includes(keyword)||doc.name.toLowerCase().includes(keyword)||doc.displayName.toLowerCase().includes(keyword);});});}catch(error){console.error('Error loading documents:',error);throw new Error('Failed to load application documents');}});return function getApplicationDocuments(_x3,_x4){return _ref3.apply(this,arguments);};}();export var getSignedDocuments=function(){var _ref4=_asyncToGenerator(function*(cid,selectedDate){try{var documents=yield clientAPI.getDocumentsByDate(cid,selectedDate);return documents.filter(function(doc){var name=(doc.name||'').toLowerCase();var displayName=(doc.displayName||'').toLowerCase();var type=(doc.type||'').toLowerCase();var isPDF=type.includes('pdf')||name.endsWith('.pdf')||displayName.endsWith('.pdf');var isPromissoryNote=name.includes('signed-promissory-note')||displayName.includes('signed-promissory note');return isPDF||isPromissoryNote;});}catch(error){console.error('Error loading signed documents:',error);throw new Error('Failed to load signed documents');}});return function getSignedDocuments(_x5,_x6){return _ref4.apply(this,arguments);};}();","map":{"version":3,"names":["clientAPI","loadApplicationDocumentDates","_ref","_asyncToGenerator","cid","dates","getDocumentDates","filteredDates","dateInfo","documents","getDocumentsByDate","date","applicationDocs","filter","doc","some","keyword","type","includes","name","toLowerCase","displayName","length","push","_objectSpread","documentCount","error","console","Error","_x","apply","arguments","loadSignedDocumentDates","_ref2","datesWithSignedDocs","signedDocs","isPDF","endsWith","isPromissoryNote","_x2","getApplicationDocuments","_ref3","selectedDate","_x3","_x4","getSignedDocuments","_ref4","_x5","_x6"],"sources":["c:/Users/ajohn/loansiya-webapp1.3.4/src/utils/documentHandlers.js"],"sourcesContent":["import { clientAPI } from '../services/api';\r\n\r\nexport const loadApplicationDocumentDates = async (cid) => {\r\n  try {\r\n    const dates = await clientAPI.getDocumentDates(cid);\r\n    const filteredDates = [];\r\n    \r\n    for (const dateInfo of dates) {\r\n      const documents = await clientAPI.getDocumentsByDate(cid, dateInfo.date);\r\n      const applicationDocs = documents.filter(doc =>\r\n        !['pdf', 'signed-promissory-note'].some(keyword =>\r\n          doc.type.includes(keyword) ||\r\n          doc.name.toLowerCase().includes(keyword) ||\r\n          doc.displayName.toLowerCase().includes(keyword)\r\n        )\r\n      );\r\n    \r\n      if (applicationDocs.length > 0) {\r\n        filteredDates.push({\r\n          ...dateInfo,\r\n          documentCount: applicationDocs.length\r\n        });\r\n      }\r\n    }\r\n    return filteredDates;\r\n  } catch (error) {\r\n    console.error('Error loading document dates:', error);\r\n    throw new Error('Failed to load document dates');\r\n  }\r\n};\r\n\r\nexport const loadSignedDocumentDates = async (cid) => {\r\n  try {\r\n    const dates = await clientAPI.getDocumentDates(cid);\r\n    const datesWithSignedDocs = [];\r\n    \r\n    for (const dateInfo of dates) {\r\n      const documents = await clientAPI.getDocumentsByDate(cid, dateInfo.date);\r\n      const signedDocs = documents.filter(doc => {\r\n        const name = (doc.name || '').toLowerCase();\r\n        const displayName = (doc.displayName || '').toLowerCase();\r\n        const type = (doc.type || '').toLowerCase();\r\n        \r\n        const isPDF = type.includes('pdf') ||\r\n          name.endsWith('.pdf') ||\r\n          displayName.endsWith('.pdf');\r\n          \r\n        const isPromissoryNote = name.includes('signed-promissory-note') ||\r\n          displayName.includes('signed-promissory note');\r\n        \r\n        return isPDF || isPromissoryNote;\r\n      });\r\n      \r\n      if (signedDocs.length > 0) {\r\n        datesWithSignedDocs.push({\r\n          ...dateInfo,\r\n          documentCount: signedDocs.length\r\n        });\r\n      }\r\n    }\r\n    return datesWithSignedDocs;\r\n  } catch (error) {\r\n    console.error('Error loading signed document dates:', error);\r\n    throw new Error('Failed to load signed document dates');\r\n  }\r\n};\r\n\r\nexport const getApplicationDocuments = async (cid, selectedDate) => {\r\n  try {\r\n    const documents = await clientAPI.getDocumentsByDate(cid, selectedDate);\r\n    return documents.filter(doc =>\r\n      !['pdf', 'signed-promissory-note'].some(keyword =>\r\n        doc.type.includes(keyword) ||\r\n        doc.name.toLowerCase().includes(keyword) ||\r\n        doc.displayName.toLowerCase().includes(keyword)\r\n      )\r\n    );\r\n  } catch (error) {\r\n    console.error('Error loading documents:', error);\r\n    throw new Error('Failed to load application documents');\r\n  }\r\n};\r\n\r\nexport const getSignedDocuments = async (cid, selectedDate) => {\r\n  try {\r\n    const documents = await clientAPI.getDocumentsByDate(cid, selectedDate);\r\n    return documents.filter(doc => {\r\n      const name = (doc.name || '').toLowerCase();\r\n      const displayName = (doc.displayName || '').toLowerCase();\r\n      const type = (doc.type || '').toLowerCase();\r\n      \r\n      const isPDF = type.includes('pdf') ||\r\n        name.endsWith('.pdf') ||\r\n        displayName.endsWith('.pdf');\r\n        \r\n      const isPromissoryNote = name.includes('signed-promissory-note') ||\r\n        displayName.includes('signed-promissory note');\r\n      \r\n      return isPDF || isPromissoryNote;\r\n    });\r\n  } catch (error) {\r\n    console.error('Error loading signed documents:', error);\r\n    throw new Error('Failed to load signed documents');\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}