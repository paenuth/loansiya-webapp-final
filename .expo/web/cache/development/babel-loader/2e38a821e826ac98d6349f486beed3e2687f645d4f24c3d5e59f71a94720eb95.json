{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var UsersContext = createContext({\n  users: [],\n  addUser: function addUser(user) {},\n  updateUser: function updateUser(user) {}\n});\nexport var UsersProvider = function UsersProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([{\n      id: '1-sample1',\n      username: 'officer1',\n      fullName: 'Maron Brown',\n      role: 'Officer',\n      status: 'Active',\n      password: 'password123',\n      createdAt: '2025-01-01T00:00:00.000Z'\n    }, {\n      id: '2-sample2',\n      username: 'officer2',\n      fullName: 'Vince Black',\n      role: 'Officer',\n      status: 'Active',\n      password: 'password123',\n      createdAt: '2025-01-01T00:00:00.000Z'\n    }, {\n      id: '3-sample3',\n      username: 'officer3',\n      fullName: 'Hane White',\n      role: 'Ops',\n      status: 'Active',\n      password: 'password123',\n      createdAt: '2025-01-01T00:00:00.000Z'\n    }, {\n      id: '4-sample4',\n      username: 'officer4',\n      fullName: 'Monke G',\n      role: 'Officer',\n      status: 'Disabled',\n      password: 'password123',\n      createdAt: '2025-01-01T00:00:00.000Z'\n    }]),\n    _useState2 = _slicedToArray(_useState, 2),\n    users = _useState2[0],\n    setUsers = _useState2[1];\n  var addUser = function addUser(user) {\n    if (!user.username || !user.fullName) {\n      throw new Error('Username and full name are required');\n    }\n    var normalizedUsername = user.username.toLowerCase().trim();\n    var normalizedFullName = user.fullName.toLowerCase().trim();\n    var existingUsername = users.find(function (u) {\n      return u.username.toLowerCase() === normalizedUsername;\n    });\n    if (existingUsername) {\n      throw new Error('Username already exists');\n    }\n    var existingNameAndRole = users.find(function (u) {\n      return u.fullName.toLowerCase() === normalizedFullName && u.role === user.role;\n    });\n    if (existingNameAndRole) {\n      throw new Error('A user with this name and role already exists');\n    }\n    var uniqueId = Date.now() + \"-\" + Math.random().toString(36).substr(2, 9);\n    var newUser = {\n      id: uniqueId,\n      username: user.username.trim(),\n      fullName: user.fullName.trim(),\n      role: user.role,\n      status: user.status || 'Active',\n      password: user.password,\n      createdAt: new Date().toISOString()\n    };\n    setUsers(function (prevUsers) {\n      return [].concat(_toConsumableArray(prevUsers), [newUser]);\n    });\n  };\n  var updateUser = function updateUser(updatedUser) {\n    if (!updatedUser.id) {\n      throw new Error('User ID is required for updating');\n    }\n    var targetUser = users.find(function (u) {\n      return u.id === updatedUser.id;\n    });\n    if (!targetUser) {\n      throw new Error('User not found');\n    }\n    if (Object.keys(updatedUser).length === 2 && updatedUser.status) {\n      setUsers(function (prevUsers) {\n        return prevUsers.map(function (user) {\n          if (user.id === updatedUser.id) {\n            return _objectSpread(_objectSpread({}, user), {}, {\n              status: updatedUser.status,\n              updatedAt: new Date().toISOString()\n            });\n          }\n          return user;\n        });\n      });\n      return;\n    }\n    var normalizedUsername = updatedUser.username ? updatedUser.username.toLowerCase().trim() : targetUser.username.toLowerCase();\n    var normalizedFullName = updatedUser.fullName ? updatedUser.fullName.toLowerCase().trim() : targetUser.fullName.toLowerCase();\n    if (updatedUser.username && updatedUser.username.trim() !== targetUser.username) {\n      var existingUser = users.find(function (u) {\n        return u.id !== targetUser.id && u.username.toLowerCase() === normalizedUsername;\n      });\n      if (existingUser) {\n        throw new Error('Username already exists');\n      }\n    }\n    if (updatedUser.fullName && updatedUser.fullName.trim() !== targetUser.fullName || updatedUser.role && updatedUser.role !== targetUser.role) {\n      var existingNameAndRole = users.find(function (u) {\n        return u.id !== targetUser.id && u.fullName.toLowerCase() === normalizedFullName && u.role === (updatedUser.role || targetUser.role);\n      });\n      if (existingNameAndRole) {\n        throw new Error('A user with this name and role already exists');\n      }\n    }\n    var cleanUpdatedUser = _objectSpread(_objectSpread(_objectSpread({}, targetUser), updatedUser), {}, {\n      id: targetUser.id,\n      updatedAt: new Date().toISOString()\n    });\n    if (cleanUpdatedUser.username) {\n      cleanUpdatedUser.username = cleanUpdatedUser.username.trim();\n    }\n    if (cleanUpdatedUser.fullName) {\n      cleanUpdatedUser.fullName = cleanUpdatedUser.fullName.trim();\n    }\n    setUsers(function (prevUsers) {\n      return prevUsers.map(function (user) {\n        if (user.id === targetUser.id) {\n          return cleanUpdatedUser;\n        }\n        return user;\n      });\n    });\n  };\n  return _jsx(UsersContext.Provider, {\n    value: {\n      users: users,\n      addUser: addUser,\n      updateUser: updateUser\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useState","jsx","_jsx","UsersContext","users","addUser","user","updateUser","UsersProvider","_ref","children","_useState","id","username","fullName","role","status","password","createdAt","_useState2","_slicedToArray","setUsers","Error","normalizedUsername","toLowerCase","trim","normalizedFullName","existingUsername","find","u","existingNameAndRole","uniqueId","Date","now","Math","random","toString","substr","newUser","toISOString","prevUsers","concat","_toConsumableArray","updatedUser","targetUser","Object","keys","length","map","_objectSpread","updatedAt","existingUser","cleanUpdatedUser","Provider","value"],"sources":["C:/Users/ajohn/loansiya-webapp1.1.0/src/contexts/UsersContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nexport const UsersContext = createContext({\r\n  users: [],\r\n  addUser: (user) => {},\r\n  updateUser: (user) => {},\r\n});\r\n\r\nexport const UsersProvider = ({ children }) => {\r\n  const [users, setUsers] = useState([\r\n    {\r\n      id: '1-sample1',\r\n      username: 'officer1',\r\n      fullName: 'Maron Brown',\r\n      role: 'Officer',\r\n      status: 'Active',\r\n      password: 'password123',\r\n      createdAt: '2025-01-01T00:00:00.000Z'\r\n    },\r\n    {\r\n      id: '2-sample2',\r\n      username: 'officer2',\r\n      fullName: 'Vince Black',\r\n      role: 'Officer',\r\n      status: 'Active',\r\n      password: 'password123',\r\n      createdAt: '2025-01-01T00:00:00.000Z'\r\n    },\r\n    {\r\n      id: '3-sample3',\r\n      username: 'officer3',\r\n      fullName: 'Hane White',\r\n      role: 'Ops',\r\n      status: 'Active',\r\n      password: 'password123',\r\n      createdAt: '2025-01-01T00:00:00.000Z'\r\n    },\r\n    {\r\n      id: '4-sample4',\r\n      username: 'officer4',\r\n      fullName: 'Monke G',\r\n      role: 'Officer',\r\n      status: 'Disabled',\r\n      password: 'password123',\r\n      createdAt: '2025-01-01T00:00:00.000Z'\r\n    }\r\n  ]);\r\n\r\n  const addUser = (user) => {\r\n    // Validate required fields\r\n    if (!user.username || !user.fullName) {\r\n      throw new Error('Username and full name are required');\r\n    }\r\n\r\n    // Normalize input for validation\r\n    const normalizedUsername = user.username.toLowerCase().trim();\r\n    const normalizedFullName = user.fullName.toLowerCase().trim();\r\n\r\n    // Check if username already exists\r\n    const existingUsername = users.find(u => u.username.toLowerCase() === normalizedUsername);\r\n    if (existingUsername) {\r\n      throw new Error('Username already exists');\r\n    }\r\n\r\n    // Check if user with same name and role exists\r\n    const existingNameAndRole = users.find(\r\n      u => u.fullName.toLowerCase() === normalizedFullName &&\r\n          u.role === user.role\r\n    );\r\n    if (existingNameAndRole) {\r\n      throw new Error('A user with this name and role already exists');\r\n    }\r\n\r\n    // Generate unique ID with timestamp and random component\r\n    const uniqueId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n    // Create a clean user object with proper structure\r\n    const newUser = {\r\n      id: uniqueId,\r\n      username: user.username.trim(),\r\n      fullName: user.fullName.trim(),\r\n      role: user.role,\r\n      status: user.status || 'Active',\r\n      password: user.password,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n\r\n    setUsers(prevUsers => [...prevUsers, newUser]);\r\n  };\r\n\r\n  const updateUser = (updatedUser) => {\r\n    if (!updatedUser.id) {\r\n      throw new Error('User ID is required for updating');\r\n    }\r\n    \r\n    // Find the target user by ID first\r\n    const targetUser = users.find(u => u.id === updatedUser.id);\r\n    if (!targetUser) {\r\n      throw new Error('User not found');\r\n    }\r\n\r\n    // For simple status updates, skip validation\r\n    if (Object.keys(updatedUser).length === 2 && updatedUser.status) {\r\n      setUsers(prevUsers =>\r\n        prevUsers.map(user => {\r\n          if (user.id === updatedUser.id) {\r\n            return {\r\n              ...user,\r\n              status: updatedUser.status,\r\n              updatedAt: new Date().toISOString()\r\n            };\r\n          }\r\n          return user;\r\n        })\r\n      );\r\n      return;\r\n    }\r\n\r\n    // For other updates, perform validation\r\n    const normalizedUsername = updatedUser.username ? updatedUser.username.toLowerCase().trim() : targetUser.username.toLowerCase();\r\n    const normalizedFullName = updatedUser.fullName ? updatedUser.fullName.toLowerCase().trim() : targetUser.fullName.toLowerCase();\r\n\r\n    // Only check for username duplicates if username is being changed\r\n    if (updatedUser.username && updatedUser.username.trim() !== targetUser.username) {\r\n      const existingUser = users.find(u =>\r\n        u.id !== targetUser.id &&\r\n        u.username.toLowerCase() === normalizedUsername\r\n      );\r\n      if (existingUser) {\r\n        throw new Error('Username already exists');\r\n      }\r\n    }\r\n\r\n    // Check for duplicate name and role if those fields are being changed\r\n    if ((updatedUser.fullName && updatedUser.fullName.trim() !== targetUser.fullName) ||\r\n        (updatedUser.role && updatedUser.role !== targetUser.role)) {\r\n      const existingNameAndRole = users.find(u =>\r\n        u.id !== targetUser.id &&\r\n        u.fullName.toLowerCase() === normalizedFullName &&\r\n        u.role === (updatedUser.role || targetUser.role)\r\n      );\r\n      if (existingNameAndRole) {\r\n        throw new Error('A user with this name and role already exists');\r\n      }\r\n    }\r\n\r\n    // Create a clean updated user object\r\n    const cleanUpdatedUser = {\r\n      ...targetUser, // Start with existing user data\r\n      ...updatedUser, // Apply updates\r\n      id: targetUser.id, // Ensure ID remains unchanged\r\n      updatedAt: new Date().toISOString()\r\n    };\r\n\r\n    // Trim string fields if they exist\r\n    if (cleanUpdatedUser.username) {\r\n      cleanUpdatedUser.username = cleanUpdatedUser.username.trim();\r\n    }\r\n    if (cleanUpdatedUser.fullName) {\r\n      cleanUpdatedUser.fullName = cleanUpdatedUser.fullName.trim();\r\n    }\r\n\r\n    // Update the specific user\r\n    setUsers(prevUsers =>\r\n      prevUsers.map(user => {\r\n        if (user.id === targetUser.id) {\r\n          return cleanUpdatedUser;\r\n        }\r\n        return user;\r\n      })\r\n    );\r\n  };\r\n\r\n  return (\r\n    <UsersContext.Provider value={{\r\n      users,\r\n      addUser,\r\n      updateUser,\r\n    }}>\r\n      {children}\r\n    </UsersContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}