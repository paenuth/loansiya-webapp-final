{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nexport var API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5600';\nexport var clientAPI = {\n  getAllClients: function () {\n    var _getAllClients = _asyncToGenerator(function* () {\n      try {\n        console.log('Fetching clients from:', API_BASE_URL);\n        var response = yield fetch(API_BASE_URL + \"/clients\");\n        if (!response.ok) {\n          throw new Error('Failed to fetch clients');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function getAllClients() {\n      return _getAllClients.apply(this, arguments);\n    }\n    return getAllClients;\n  }(),\n  getClientById: function () {\n    var _getClientById = _asyncToGenerator(function* (cid) {\n      try {\n        var response = yield fetch(API_BASE_URL + \"/client/\" + cid);\n        if (!response.ok) {\n          throw new Error('Failed to fetch client');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function getClientById(_x) {\n      return _getClientById.apply(this, arguments);\n    }\n    return getClientById;\n  }(),\n  getClientScore: function () {\n    var _getClientScore = _asyncToGenerator(function* (cid) {\n      try {\n        var response = yield fetch(API_BASE_URL + \"/score/\" + cid, {\n          method: 'POST'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch client score');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function getClientScore(_x2) {\n      return _getClientScore.apply(this, arguments);\n    }\n    return getClientScore;\n  }(),\n  processMetrics: function () {\n    var _processMetrics = _asyncToGenerator(function* (cid) {\n      try {\n        var response = yield fetch(API_BASE_URL + \"/metrics/\" + cid, {\n          method: 'POST'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to process metrics');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function processMetrics(_x3) {\n      return _processMetrics.apply(this, arguments);\n    }\n    return processMetrics;\n  }(),\n  processLoanDecision: function () {\n    var _processLoanDecision = _asyncToGenerator(function* (cid, decision) {\n      var additionalData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      try {\n        var response = yield fetch(API_BASE_URL + \"/loan/\" + cid + \"/decision\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(_objectSpread({\n            decision: decision\n          }, additionalData))\n        });\n        if (!response.ok) {\n          throw new Error('Failed to process loan decision');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function processLoanDecision(_x4, _x5) {\n      return _processLoanDecision.apply(this, arguments);\n    }\n    return processLoanDecision;\n  }(),\n  fetchClientLoanData: function () {\n    var _fetchClientLoanData = _asyncToGenerator(function* (cid) {\n      try {\n        var response = yield fetch(API_BASE_URL + \"/client-loan-data/\" + cid);\n        if (!response.ok) {\n          throw new Error('Failed to fetch loan data');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function fetchClientLoanData(_x6) {\n      return _fetchClientLoanData.apply(this, arguments);\n    }\n    return fetchClientLoanData;\n  }(),\n  updateLoanAmount: function () {\n    var _updateLoanAmount = _asyncToGenerator(function* (cid, amount) {\n      try {\n        var response = yield fetch(API_BASE_URL + \"/loan/\" + cid + \"/amount\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            amount: amount\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to update loan amount');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function updateLoanAmount(_x7, _x8) {\n      return _updateLoanAmount.apply(this, arguments);\n    }\n    return updateLoanAmount;\n  }(),\n  notifications: {\n    getNotifications: function () {\n      var _getNotifications = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch(API_BASE_URL + \"/notifications\");\n          if (!response.ok) {\n            throw new Error('Failed to fetch notifications');\n          }\n          return response.json();\n        } catch (error) {\n          console.error('API Error:', error);\n          throw error;\n        }\n      });\n      function getNotifications() {\n        return _getNotifications.apply(this, arguments);\n      }\n      return getNotifications;\n    }(),\n    createNotification: function () {\n      var _createNotification = _asyncToGenerator(function* (notification) {\n        try {\n          var response = yield fetch(API_BASE_URL + \"/notifications\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(notification)\n          });\n          if (!response.ok) {\n            throw new Error('Failed to create notification');\n          }\n          return response.json();\n        } catch (error) {\n          console.error('API Error:', error);\n          throw error;\n        }\n      });\n      function createNotification(_x9) {\n        return _createNotification.apply(this, arguments);\n      }\n      return createNotification;\n    }(),\n    markAsRead: function () {\n      var _markAsRead = _asyncToGenerator(function* (notificationIds) {\n        try {\n          var response = yield fetch(API_BASE_URL + \"/notifications/mark-read\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              notificationIds: notificationIds\n            })\n          });\n          if (!response.ok) {\n            throw new Error('Failed to mark notifications as read');\n          }\n          return response.json();\n        } catch (error) {\n          console.error('API Error:', error);\n          throw error;\n        }\n      });\n      function markAsRead(_x0) {\n        return _markAsRead.apply(this, arguments);\n      }\n      return markAsRead;\n    }()\n  }\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","clientAPI","getAllClients","_getAllClients","_asyncToGenerator","console","log","response","fetch","ok","Error","json","error","apply","arguments","getClientById","_getClientById","cid","_x","getClientScore","_getClientScore","method","_x2","processMetrics","_processMetrics","_x3","processLoanDecision","_processLoanDecision","decision","additionalData","length","undefined","headers","body","JSON","stringify","_objectSpread","_x4","_x5","fetchClientLoanData","_fetchClientLoanData","_x6","updateLoanAmount","_updateLoanAmount","amount","_x7","_x8","notifications","getNotifications","_getNotifications","createNotification","_createNotification","notification","_x9","markAsRead","_markAsRead","notificationIds","_x0"],"sources":["C:/Users/ajohn/loansiya-webapp1.3.4/src/services/api.js"],"sourcesContent":["export const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5600';\r\n\r\nexport const clientAPI = {\r\n  // Get all clients from the Credit Scoring API\r\n  getAllClients: async () => {\r\n    try {\r\n      console.log('Fetching clients from:', API_BASE_URL);\r\n      const response = await fetch(`${API_BASE_URL}/clients`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch clients');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get single client by CID\r\n  getClientById: async (cid) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/client/${cid}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch client');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get client score data\r\n  getClientScore: async (cid) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/score/${cid}`, {\r\n        method: 'POST'\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch client score');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Process client metrics\r\n  processMetrics: async (cid) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/metrics/${cid}`, {\r\n        method: 'POST'\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to process metrics');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Process loan decision (approve/decline)\r\n  processLoanDecision: async (cid, decision, additionalData = {}) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/loan/${cid}/decision`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ decision, ...additionalData })\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to process loan decision');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fetch client loan data\r\n  fetchClientLoanData: async (cid) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/client-loan-data/${cid}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch loan data');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update loan amount\r\n  updateLoanAmount: async (cid, amount) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/loan/${cid}/amount`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ amount })\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update loan amount');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Notification endpoints\r\n  notifications: {\r\n    // Get notifications for the current user\r\n    getNotifications: async () => {\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/notifications`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch notifications');\r\n        }\r\n        return response.json();\r\n      } catch (error) {\r\n        console.error('API Error:', error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Create a new notification\r\n    createNotification: async (notification) => {\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/notifications`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(notification)\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Failed to create notification');\r\n        }\r\n        return response.json();\r\n      } catch (error) {\r\n        console.error('API Error:', error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Mark notifications as read\r\n    markAsRead: async (notificationIds) => {\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/notifications/mark-read`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ notificationIds })\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Failed to mark notifications as read');\r\n        }\r\n        return response.json();\r\n      } catch (error) {\r\n        console.error('API Error:', error);\r\n        throw error;\r\n      }\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}