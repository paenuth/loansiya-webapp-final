{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nexport var API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5600';\nvar DOCUMENT_TYPE_MAP = {\n  'Valid Id': 'validid',\n  'ORCR': 'orcr',\n  'Land Title': 'landtitle',\n  'Deeds of Assignment': 'deed',\n  'Promissory Note': 'promissory-note'\n};\nexport var DOCUMENT_CATEGORIES = {\n  APPLICATION_DOCS: ['Valid Id', 'ORCR', 'Land Title', 'Deeds of Assignment'],\n  SIGNED_DOCS: ['Promissory Note']\n};\nexport var clientAPI = {\n  getAllClients: function () {\n    var _getAllClients = _asyncToGenerator(function* () {\n      try {\n        console.log('Fetching clients from:', API_BASE_URL);\n        var response = yield fetch(API_BASE_URL + \"/clients\");\n        if (!response.ok) {\n          throw new Error('Failed to fetch clients');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function getAllClients() {\n      return _getAllClients.apply(this, arguments);\n    }\n    return getAllClients;\n  }(),\n  getClientById: function () {\n    var _getClientById = _asyncToGenerator(function* (cid) {\n      try {\n        var response = yield fetch(API_BASE_URL + \"/client/\" + cid);\n        if (!response.ok) {\n          throw new Error('Failed to fetch client');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function getClientById(_x) {\n      return _getClientById.apply(this, arguments);\n    }\n    return getClientById;\n  }(),\n  getClientScore: function () {\n    var _getClientScore = _asyncToGenerator(function* (cid) {\n      try {\n        var response = yield fetch(API_BASE_URL + \"/score/\" + cid, {\n          method: 'POST'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to fetch client score');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function getClientScore(_x2) {\n      return _getClientScore.apply(this, arguments);\n    }\n    return getClientScore;\n  }(),\n  processMetrics: function () {\n    var _processMetrics = _asyncToGenerator(function* (cid) {\n      try {\n        var response = yield fetch(API_BASE_URL + \"/metrics/\" + cid, {\n          method: 'POST'\n        });\n        if (!response.ok) {\n          throw new Error('Failed to process metrics');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function processMetrics(_x3) {\n      return _processMetrics.apply(this, arguments);\n    }\n    return processMetrics;\n  }(),\n  processLoanDecision: function () {\n    var _processLoanDecision = _asyncToGenerator(function* (cid, decision) {\n      var additionalData = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : {};\n      try {\n        var response = yield fetch(API_BASE_URL + \"/loan/\" + cid + \"/decision\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify(_objectSpread({\n            decision: decision\n          }, additionalData))\n        });\n        if (!response.ok) {\n          throw new Error('Failed to process loan decision');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function processLoanDecision(_x4, _x5) {\n      return _processLoanDecision.apply(this, arguments);\n    }\n    return processLoanDecision;\n  }(),\n  fetchClientLoanData: function () {\n    var _fetchClientLoanData = _asyncToGenerator(function* (cid) {\n      try {\n        var response = yield fetch(API_BASE_URL + \"/client-loan-data/\" + cid);\n        if (!response.ok) {\n          throw new Error('Failed to fetch loan data');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function fetchClientLoanData(_x6) {\n      return _fetchClientLoanData.apply(this, arguments);\n    }\n    return fetchClientLoanData;\n  }(),\n  updateLoanAmount: function () {\n    var _updateLoanAmount = _asyncToGenerator(function* (cid, amount) {\n      try {\n        var response = yield fetch(API_BASE_URL + \"/loan/\" + cid + \"/amount\", {\n          method: 'POST',\n          headers: {\n            'Content-Type': 'application/json'\n          },\n          body: JSON.stringify({\n            amount: amount\n          })\n        });\n        if (!response.ok) {\n          throw new Error('Failed to update loan amount');\n        }\n        return response.json();\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function updateLoanAmount(_x7, _x8) {\n      return _updateLoanAmount.apply(this, arguments);\n    }\n    return updateLoanAmount;\n  }(),\n  notifications: {\n    getNotifications: function () {\n      var _getNotifications = _asyncToGenerator(function* () {\n        try {\n          var response = yield fetch(API_BASE_URL + \"/notifications\");\n          if (!response.ok) {\n            throw new Error('Failed to fetch notifications');\n          }\n          return response.json();\n        } catch (error) {\n          console.error('API Error:', error);\n          throw error;\n        }\n      });\n      function getNotifications() {\n        return _getNotifications.apply(this, arguments);\n      }\n      return getNotifications;\n    }(),\n    createNotification: function () {\n      var _createNotification = _asyncToGenerator(function* (notification) {\n        try {\n          var response = yield fetch(API_BASE_URL + \"/notifications\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify(notification)\n          });\n          if (!response.ok) {\n            throw new Error('Failed to create notification');\n          }\n          return response.json();\n        } catch (error) {\n          console.error('API Error:', error);\n          throw error;\n        }\n      });\n      function createNotification(_x9) {\n        return _createNotification.apply(this, arguments);\n      }\n      return createNotification;\n    }(),\n    markAsRead: function () {\n      var _markAsRead = _asyncToGenerator(function* (notificationIds) {\n        try {\n          var response = yield fetch(API_BASE_URL + \"/notifications/mark-read\", {\n            method: 'POST',\n            headers: {\n              'Content-Type': 'application/json'\n            },\n            body: JSON.stringify({\n              notificationIds: notificationIds\n            })\n          });\n          if (!response.ok) {\n            throw new Error('Failed to mark notifications as read');\n          }\n          return response.json();\n        } catch (error) {\n          console.error('API Error:', error);\n          throw error;\n        }\n      });\n      function markAsRead(_x0) {\n        return _markAsRead.apply(this, arguments);\n      }\n      return markAsRead;\n    }()\n  },\n  viewDocumentByFilename: function () {\n    var _viewDocumentByFilename = _asyncToGenerator(function* (cid, filename) {\n      var date = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : null;\n      try {\n        var paddedCid = cid.toString().padStart(3, '0');\n        console.log('Fetching document file:', filename, 'for CID:', paddedCid, 'date:', date);\n        var url = API_BASE_URL + \"/documents/\" + paddedCid + \"/file/\" + encodeURIComponent(filename);\n        if (date) {\n          url += \"?date=\" + encodeURIComponent(date);\n        }\n        var response = yield fetch(url);\n        if (!response.ok) {\n          var errorData = yield response.json();\n          throw new Error(errorData.error || 'Failed to fetch document');\n        }\n        var contentType = response.headers.get('content-type');\n        var blob = yield response.blob();\n        var objectUrl = URL.createObjectURL(new Blob([blob], {\n          type: contentType\n        }));\n        return {\n          url: objectUrl,\n          type: contentType\n        };\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function viewDocumentByFilename(_x1, _x10) {\n      return _viewDocumentByFilename.apply(this, arguments);\n    }\n    return viewDocumentByFilename;\n  }(),\n  viewDocument: function () {\n    var _viewDocument = _asyncToGenerator(function* (cid, documentType) {\n      try {\n        var paddedCid = cid.toString().padStart(3, '0');\n        var internalType = DOCUMENT_TYPE_MAP[documentType];\n        if (!internalType) {\n          throw new Error(\"Invalid document type: \" + documentType);\n        }\n        var encodedType = encodeURIComponent(internalType);\n        console.log('Fetching document:', documentType, 'as', internalType, 'for CID:', paddedCid);\n        var response = yield fetch(API_BASE_URL + \"/documents/\" + paddedCid + \"/\" + encodedType);\n        if (!response.ok) {\n          var errorData = yield response.json();\n          throw new Error(errorData.error || 'Failed to fetch document');\n        }\n        var contentType = response.headers.get('content-type');\n        var blob = yield response.blob();\n        var objectUrl = URL.createObjectURL(new Blob([blob], {\n          type: contentType\n        }));\n        return {\n          url: objectUrl,\n          type: contentType\n        };\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function viewDocument(_x11, _x12) {\n      return _viewDocument.apply(this, arguments);\n    }\n    return viewDocument;\n  }(),\n  getLatestDocuments: function () {\n    var _getLatestDocuments = _asyncToGenerator(function* (cid) {\n      try {\n        var paddedCid = cid.toString().padStart(3, '0');\n        console.log('Getting documents for padded CID:', paddedCid);\n        var response = yield fetch(API_BASE_URL + \"/documents/\" + paddedCid + \"/all\");\n        if (!response.ok) {\n          var errorData = yield response.json();\n          throw new Error(errorData.error || 'Failed to fetch documents');\n        }\n        var data = yield response.json();\n        return data.documents;\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function getLatestDocuments(_x13) {\n      return _getLatestDocuments.apply(this, arguments);\n    }\n    return getLatestDocuments;\n  }(),\n  getDocumentDates: function () {\n    var _getDocumentDates = _asyncToGenerator(function* (cid) {\n      try {\n        var paddedCid = cid.toString().padStart(3, '0');\n        console.log('Getting document dates for padded CID:', paddedCid);\n        var response = yield fetch(API_BASE_URL + \"/documents/\" + paddedCid + \"/dates\");\n        if (!response.ok) {\n          var errorData = yield response.json();\n          throw new Error(errorData.error || 'Failed to fetch document dates');\n        }\n        var data = yield response.json();\n        return data.dates;\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function getDocumentDates(_x14) {\n      return _getDocumentDates.apply(this, arguments);\n    }\n    return getDocumentDates;\n  }(),\n  getDocumentsByDate: function () {\n    var _getDocumentsByDate = _asyncToGenerator(function* (cid, date) {\n      try {\n        var paddedCid = cid.toString().padStart(3, '0');\n        console.log('Getting documents for padded CID:', paddedCid, 'date:', date);\n        var response = yield fetch(API_BASE_URL + \"/documents/\" + paddedCid + \"/date/\" + date);\n        if (!response.ok) {\n          var errorData = yield response.json();\n          throw new Error(errorData.error || 'Failed to fetch documents');\n        }\n        var data = yield response.json();\n        return data.documents;\n      } catch (error) {\n        console.error('API Error:', error);\n        throw error;\n      }\n    });\n    function getDocumentsByDate(_x15, _x16) {\n      return _getDocumentsByDate.apply(this, arguments);\n    }\n    return getDocumentsByDate;\n  }()\n};","map":{"version":3,"names":["API_BASE_URL","process","env","REACT_APP_API_URL","DOCUMENT_TYPE_MAP","DOCUMENT_CATEGORIES","APPLICATION_DOCS","SIGNED_DOCS","clientAPI","getAllClients","_getAllClients","_asyncToGenerator","console","log","response","fetch","ok","Error","json","error","apply","arguments","getClientById","_getClientById","cid","_x","getClientScore","_getClientScore","method","_x2","processMetrics","_processMetrics","_x3","processLoanDecision","_processLoanDecision","decision","additionalData","length","undefined","headers","body","JSON","stringify","_objectSpread","_x4","_x5","fetchClientLoanData","_fetchClientLoanData","_x6","updateLoanAmount","_updateLoanAmount","amount","_x7","_x8","notifications","getNotifications","_getNotifications","createNotification","_createNotification","notification","_x9","markAsRead","_markAsRead","notificationIds","_x0","viewDocumentByFilename","_viewDocumentByFilename","filename","date","paddedCid","toString","padStart","url","encodeURIComponent","errorData","contentType","get","blob","objectUrl","URL","createObjectURL","Blob","type","_x1","_x10","viewDocument","_viewDocument","documentType","internalType","encodedType","_x11","_x12","getLatestDocuments","_getLatestDocuments","data","documents","_x13","getDocumentDates","_getDocumentDates","dates","_x14","getDocumentsByDate","_getDocumentsByDate","_x15","_x16"],"sources":["C:/Users/ajohn/loansiya-webapp1.3.4/src/services/api.js"],"sourcesContent":["export const API_BASE_URL = process.env.REACT_APP_API_URL || 'http://localhost:5600';\r\n\r\n// Document type mapping for API requests\r\nconst DOCUMENT_TYPE_MAP = {\r\n  'Valid Id': 'validid',\r\n  'ORCR': 'orcr',\r\n  'Land Title': 'landtitle',\r\n  'Deeds of Assignment': 'deed',\r\n  'Promissory Note': 'promissory-note'\r\n};\r\n\r\n// Document categories\r\nexport const DOCUMENT_CATEGORIES = {\r\n  APPLICATION_DOCS: ['Valid Id', 'ORCR', 'Land Title', 'Deeds of Assignment'],\r\n  SIGNED_DOCS: ['Promissory Note']\r\n};\r\n\r\nexport const clientAPI = {\r\n  // Get all clients from the Credit Scoring API\r\n  getAllClients: async () => {\r\n    try {\r\n      console.log('Fetching clients from:', API_BASE_URL);\r\n      const response = await fetch(`${API_BASE_URL}/clients`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch clients');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get single client by CID\r\n  getClientById: async (cid) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/client/${cid}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch client');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get client score data\r\n  getClientScore: async (cid) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/score/${cid}`, {\r\n        method: 'POST'\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch client score');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Process client metrics\r\n  processMetrics: async (cid) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/metrics/${cid}`, {\r\n        method: 'POST'\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to process metrics');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Process loan decision (approve/decline)\r\n  processLoanDecision: async (cid, decision, additionalData = {}) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/loan/${cid}/decision`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ decision, ...additionalData })\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to process loan decision');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Fetch client loan data\r\n  fetchClientLoanData: async (cid) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/client-loan-data/${cid}`);\r\n      if (!response.ok) {\r\n        throw new Error('Failed to fetch loan data');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Update loan amount\r\n  updateLoanAmount: async (cid, amount) => {\r\n    try {\r\n      const response = await fetch(`${API_BASE_URL}/loan/${cid}/amount`, {\r\n        method: 'POST',\r\n        headers: {\r\n          'Content-Type': 'application/json'\r\n        },\r\n        body: JSON.stringify({ amount })\r\n      });\r\n      if (!response.ok) {\r\n        throw new Error('Failed to update loan amount');\r\n      }\r\n      return response.json();\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Notification endpoints\r\n  notifications: {\r\n    // Get notifications for the current user\r\n    getNotifications: async () => {\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/notifications`);\r\n        if (!response.ok) {\r\n          throw new Error('Failed to fetch notifications');\r\n        }\r\n        return response.json();\r\n      } catch (error) {\r\n        console.error('API Error:', error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Create a new notification\r\n    createNotification: async (notification) => {\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/notifications`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify(notification)\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Failed to create notification');\r\n        }\r\n        return response.json();\r\n      } catch (error) {\r\n        console.error('API Error:', error);\r\n        throw error;\r\n      }\r\n    },\r\n\r\n    // Mark notifications as read\r\n    markAsRead: async (notificationIds) => {\r\n      try {\r\n        const response = await fetch(`${API_BASE_URL}/notifications/mark-read`, {\r\n          method: 'POST',\r\n          headers: {\r\n            'Content-Type': 'application/json'\r\n          },\r\n          body: JSON.stringify({ notificationIds })\r\n        });\r\n        if (!response.ok) {\r\n          throw new Error('Failed to mark notifications as read');\r\n        }\r\n        return response.json();\r\n      } catch (error) {\r\n        console.error('API Error:', error);\r\n        throw error;\r\n      }\r\n    }\r\n  },\r\n\r\n  // View client document by specific filename\r\n  viewDocumentByFilename: async (cid, filename, date = null) => {\r\n    try {\r\n      // Pad CID with leading zeros\r\n      const paddedCid = cid.toString().padStart(3, '0');\r\n\r\n      // Use the new endpoint that takes specific filename\r\n      console.log('Fetching document file:', filename, 'for CID:', paddedCid, 'date:', date);\r\n      \r\n      // Build URL with optional date parameter\r\n      let url = `${API_BASE_URL}/documents/${paddedCid}/file/${encodeURIComponent(filename)}`;\r\n      if (date) {\r\n        url += `?date=${encodeURIComponent(date)}`;\r\n      }\r\n      \r\n      const response = await fetch(url);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch document');\r\n      }\r\n      \r\n      // Get content type from response headers\r\n      const contentType = response.headers.get('content-type');\r\n      const blob = await response.blob();\r\n      \r\n      // Create object URL for preview\r\n      const objectUrl = URL.createObjectURL(new Blob([blob], { type: contentType }));\r\n      return {\r\n        url: objectUrl,\r\n        type: contentType\r\n      };\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // View client document with preview support (legacy - uses document type)\r\n  viewDocument: async (cid, documentType) => {\r\n    try {\r\n      // Pad CID with leading zeros\r\n      const paddedCid = cid.toString().padStart(3, '0');\r\n\r\n      // Map document type to internal type\r\n      const internalType = DOCUMENT_TYPE_MAP[documentType];\r\n      if (!internalType) {\r\n        throw new Error(`Invalid document type: ${documentType}`);\r\n      }\r\n\r\n      // Encode the internal type for URL safety\r\n      const encodedType = encodeURIComponent(internalType);\r\n      console.log('Fetching document:', documentType, 'as', internalType, 'for CID:', paddedCid);\r\n      const response = await fetch(`${API_BASE_URL}/documents/${paddedCid}/${encodedType}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch document');\r\n      }\r\n      \r\n      // Get content type from response headers\r\n      const contentType = response.headers.get('content-type');\r\n      const blob = await response.blob();\r\n      \r\n      // Create object URL for preview\r\n      const objectUrl = URL.createObjectURL(new Blob([blob], { type: contentType }));\r\n      return {\r\n        url: objectUrl,\r\n        type: contentType\r\n      };\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all documents from latest folder\r\n  getLatestDocuments: async (cid) => {\r\n    try {\r\n      // Pad CID with leading zeros to match GCS folder structure (e.g., '1' -> '001')\r\n      const paddedCid = cid.toString().padStart(3, '0');\r\n      console.log('Getting documents for padded CID:', paddedCid);\r\n      const response = await fetch(`${API_BASE_URL}/documents/${paddedCid}/all`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch documents');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.documents;\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get all document dates for a client\r\n  getDocumentDates: async (cid) => {\r\n    try {\r\n      // Pad CID with leading zeros to match GCS folder structure\r\n      const paddedCid = cid.toString().padStart(3, '0');\r\n      console.log('Getting document dates for padded CID:', paddedCid);\r\n      const response = await fetch(`${API_BASE_URL}/documents/${paddedCid}/dates`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch document dates');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.dates;\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  },\r\n\r\n  // Get documents from specific date folder\r\n  getDocumentsByDate: async (cid, date) => {\r\n    try {\r\n      // Pad CID with leading zeros\r\n      const paddedCid = cid.toString().padStart(3, '0');\r\n      console.log('Getting documents for padded CID:', paddedCid, 'date:', date);\r\n      const response = await fetch(`${API_BASE_URL}/documents/${paddedCid}/date/${date}`);\r\n      \r\n      if (!response.ok) {\r\n        const errorData = await response.json();\r\n        throw new Error(errorData.error || 'Failed to fetch documents');\r\n      }\r\n\r\n      const data = await response.json();\r\n      return data.documents;\r\n    } catch (error) {\r\n      console.error('API Error:', error);\r\n      throw error;\r\n    }\r\n  }\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}