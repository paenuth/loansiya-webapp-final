{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport { createContext, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var AuthContext = createContext({\n  currentUser: null,\n  setCurrentUser: function setCurrentUser() {},\n  resetPassword: function resetPassword() {}\n});\nexport var AuthProvider = function AuthProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState(null),\n    _useState2 = _slicedToArray(_useState, 2),\n    currentUser = _useState2[0],\n    setCurrentUser = _useState2[1];\n  var resetPassword = function () {\n    var _ref2 = _asyncToGenerator(function* (username, newPassword) {\n      return new Promise(function (resolve) {\n        setTimeout(function () {\n          resolve({\n            success: true\n          });\n        }, 1000);\n      });\n    });\n    return function resetPassword(_x, _x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  return _jsx(AuthContext.Provider, {\n    value: {\n      currentUser: currentUser,\n      setCurrentUser: setCurrentUser,\n      resetPassword: resetPassword\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["createContext","useState","jsx","_jsx","AuthContext","currentUser","setCurrentUser","resetPassword","AuthProvider","_ref","children","_useState","_useState2","_slicedToArray","_ref2","_asyncToGenerator","username","newPassword","Promise","resolve","setTimeout","success","_x","_x2","apply","arguments","Provider","value"],"sources":["C:/Users/ajohn/loansiya-webapp1.1.0/src/contexts/AuthContext.js"],"sourcesContent":["import { createContext, useState } from 'react';\r\n\r\nexport const AuthContext = createContext({\r\n  currentUser: null,\r\n  setCurrentUser: () => {},\r\n  resetPassword: () => {},\r\n});\r\n\r\nexport const AuthProvider = ({ children }) => {\r\n  const [currentUser, setCurrentUser] = useState(null);\r\n\r\n  const resetPassword = async (username, newPassword) => {\r\n    // In a real app, this would make an API call to reset the password\r\n    // For now, we'll just simulate the process\r\n    return new Promise((resolve) => {\r\n      setTimeout(() => {\r\n        resolve({ success: true });\r\n      }, 1000);\r\n    });\r\n  };\r\n\r\n  return (\r\n    <AuthContext.Provider value={{\r\n      currentUser,\r\n      setCurrentUser,\r\n      resetPassword,\r\n    }}>\r\n      {children}\r\n    </AuthContext.Provider>\r\n  );\r\n};"],"mappings":";;AAAA,SAASA,aAAa,EAAEC,QAAQ,QAAQ,OAAO;AAAC,SAAAC,GAAA,IAAAC,IAAA;AAEhD,OAAO,IAAMC,WAAW,GAAGJ,aAAa,CAAC;EACvCK,WAAW,EAAE,IAAI;EACjBC,cAAc,EAAE,SAAhBA,cAAcA,CAAA,EAAQ,CAAC,CAAC;EACxBC,aAAa,EAAE,SAAfA,aAAaA,CAAA,EAAQ,CAAC;AACxB,CAAC,CAAC;AAEF,OAAO,IAAMC,YAAY,GAAG,SAAfA,YAAYA,CAAAC,IAAA,EAAqB;EAAA,IAAfC,QAAQ,GAAAD,IAAA,CAARC,QAAQ;EACrC,IAAAC,SAAA,GAAsCV,QAAQ,CAAC,IAAI,CAAC;IAAAW,UAAA,GAAAC,cAAA,CAAAF,SAAA;IAA7CN,WAAW,GAAAO,UAAA;IAAEN,cAAc,GAAAM,UAAA;EAElC,IAAML,aAAa;IAAA,IAAAO,KAAA,GAAAC,iBAAA,CAAG,WAAOC,QAAQ,EAAEC,WAAW,EAAK;MAGrD,OAAO,IAAIC,OAAO,CAAC,UAACC,OAAO,EAAK;QAC9BC,UAAU,CAAC,YAAM;UACfD,OAAO,CAAC;YAAEE,OAAO,EAAE;UAAK,CAAC,CAAC;QAC5B,CAAC,EAAE,IAAI,CAAC;MACV,CAAC,CAAC;IACJ,CAAC;IAAA,gBARKd,aAAaA,CAAAe,EAAA,EAAAC,GAAA;MAAA,OAAAT,KAAA,CAAAU,KAAA,OAAAC,SAAA;IAAA;EAAA,GAQlB;EAED,OACEtB,IAAA,CAACC,WAAW,CAACsB,QAAQ;IAACC,KAAK,EAAE;MAC3BtB,WAAW,EAAXA,WAAW;MACXC,cAAc,EAAdA,cAAc;MACdC,aAAa,EAAbA;IACF,CAAE;IAAAG,QAAA,EACCA;EAAQ,CACW,CAAC;AAE3B,CAAC","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}