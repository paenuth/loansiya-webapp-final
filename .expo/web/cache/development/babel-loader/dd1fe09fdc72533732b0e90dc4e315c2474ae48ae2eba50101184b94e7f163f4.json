{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var UsersContext = createContext({\n  users: [],\n  addUser: function addUser(user) {},\n  updateUser: function updateUser(user) {}\n});\nexport var UsersProvider = function UsersProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    users = _useState2[0],\n    setUsers = _useState2[1];\n  var addUser = function addUser(user) {\n    if (!user.username || !user.fullName) {\n      throw new Error('Username and full name are required');\n    }\n    var normalizedUsername = user.username.toLowerCase().trim();\n    var normalizedFullName = user.fullName.toLowerCase().trim();\n    var existingUsername = users.find(function (u) {\n      return u.username.toLowerCase() === normalizedUsername;\n    });\n    if (existingUsername) {\n      throw new Error('Username already exists');\n    }\n    var existingNameAndRole = users.find(function (u) {\n      return u.fullName.toLowerCase() === normalizedFullName && u.role === user.role;\n    });\n    if (existingNameAndRole) {\n      throw new Error('A user with this name and role already exists');\n    }\n    var uniqueId = Date.now() + \"-\" + Math.random().toString(36).substr(2, 9);\n    var newUser = {\n      id: uniqueId,\n      username: user.username.trim(),\n      fullName: user.fullName.trim(),\n      role: user.role,\n      status: user.status || 'Active',\n      password: user.password,\n      createdAt: new Date().toISOString()\n    };\n    setUsers(function (prevUsers) {\n      return [].concat(_toConsumableArray(prevUsers), [newUser]);\n    });\n  };\n  var updateUser = function updateUser(updatedUser) {\n    if (!updatedUser.id) {\n      throw new Error('User ID is required for updating');\n    }\n    setUsers(function (prevUsers) {\n      var targetUser = prevUsers.find(function (u) {\n        return u.id === updatedUser.id;\n      });\n      if (!targetUser) {\n        throw new Error('User not found');\n      }\n      var normalizedUsername = updatedUser.username ? updatedUser.username.toLowerCase().trim() : targetUser.username.toLowerCase();\n      var normalizedFullName = updatedUser.fullName ? updatedUser.fullName.toLowerCase().trim() : targetUser.fullName.toLowerCase();\n      if (updatedUser.username && updatedUser.username.trim() !== targetUser.username) {\n        var existingUser = prevUsers.find(function (u) {\n          return u.id !== targetUser.id && u.username.toLowerCase() === normalizedUsername;\n        });\n        if (existingUser) {\n          throw new Error('Username already exists');\n        }\n      }\n      if (updatedUser.fullName && updatedUser.fullName.trim() !== targetUser.fullName || updatedUser.role && updatedUser.role !== targetUser.role) {\n        var existingNameAndRole = prevUsers.find(function (u) {\n          return u.id !== targetUser.id && u.fullName.toLowerCase() === normalizedFullName && u.role === (updatedUser.role || targetUser.role);\n        });\n        if (existingNameAndRole) {\n          throw new Error('A user with this name and role already exists');\n        }\n      }\n      var cleanUpdatedUser = _objectSpread(_objectSpread(_objectSpread({}, targetUser), updatedUser), {}, {\n        id: targetUser.id,\n        updatedAt: new Date().toISOString()\n      });\n      if (cleanUpdatedUser.username) {\n        cleanUpdatedUser.username = cleanUpdatedUser.username.trim();\n      }\n      if (cleanUpdatedUser.fullName) {\n        cleanUpdatedUser.fullName = cleanUpdatedUser.fullName.trim();\n      }\n      return prevUsers.map(function (user) {\n        if (user.id === targetUser.id) {\n          return cleanUpdatedUser;\n        }\n        return user;\n      });\n    });\n  };\n  return _jsx(UsersContext.Provider, {\n    value: {\n      users: users,\n      addUser: addUser,\n      updateUser: updateUser\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useState","jsx","_jsx","UsersContext","users","addUser","user","updateUser","UsersProvider","_ref","children","_useState","_useState2","_slicedToArray","setUsers","username","fullName","Error","normalizedUsername","toLowerCase","trim","normalizedFullName","existingUsername","find","u","existingNameAndRole","role","uniqueId","Date","now","Math","random","toString","substr","newUser","id","status","password","createdAt","toISOString","prevUsers","concat","_toConsumableArray","updatedUser","targetUser","existingUser","cleanUpdatedUser","_objectSpread","updatedAt","map","Provider","value"],"sources":["C:/Users/ajohn/loansiya-webapp1.1.0/src/contexts/UsersContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nexport const UsersContext = createContext({\r\n  users: [],\r\n  addUser: (user) => {},\r\n  updateUser: (user) => {},\r\n});\r\n\r\nexport const UsersProvider = ({ children }) => {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const addUser = (user) => {\r\n    // Validate required fields\r\n    if (!user.username || !user.fullName) {\r\n      throw new Error('Username and full name are required');\r\n    }\r\n\r\n    // Normalize input for validation\r\n    const normalizedUsername = user.username.toLowerCase().trim();\r\n    const normalizedFullName = user.fullName.toLowerCase().trim();\r\n\r\n    // Check if username already exists\r\n    const existingUsername = users.find(u => u.username.toLowerCase() === normalizedUsername);\r\n    if (existingUsername) {\r\n      throw new Error('Username already exists');\r\n    }\r\n\r\n    // Check if user with same name and role exists\r\n    const existingNameAndRole = users.find(\r\n      u => u.fullName.toLowerCase() === normalizedFullName &&\r\n          u.role === user.role\r\n    );\r\n    if (existingNameAndRole) {\r\n      throw new Error('A user with this name and role already exists');\r\n    }\r\n\r\n    // Generate unique ID with timestamp and random component\r\n    const uniqueId = `${Date.now()}-${Math.random().toString(36).substr(2, 9)}`;\r\n\r\n    // Create a clean user object with proper structure\r\n    const newUser = {\r\n      id: uniqueId,\r\n      username: user.username.trim(),\r\n      fullName: user.fullName.trim(),\r\n      role: user.role,\r\n      status: user.status || 'Active',\r\n      password: user.password,\r\n      createdAt: new Date().toISOString()\r\n    };\r\n\r\n    setUsers(prevUsers => [...prevUsers, newUser]);\r\n  };\r\n\r\n  const updateUser = (updatedUser) => {\r\n    if (!updatedUser.id) {\r\n      throw new Error('User ID is required for updating');\r\n    }\r\n    \r\n    setUsers(prevUsers => {\r\n      // Find the target user by ID\r\n      const targetUser = prevUsers.find(u => u.id === updatedUser.id);\r\n      if (!targetUser) {\r\n        throw new Error('User not found');\r\n      }\r\n\r\n      // Normalize input for validation\r\n      const normalizedUsername = updatedUser.username ? updatedUser.username.toLowerCase().trim() : targetUser.username.toLowerCase();\r\n      const normalizedFullName = updatedUser.fullName ? updatedUser.fullName.toLowerCase().trim() : targetUser.fullName.toLowerCase();\r\n\r\n      // Only check for username duplicates if username is being changed\r\n      if (updatedUser.username && updatedUser.username.trim() !== targetUser.username) {\r\n        const existingUser = prevUsers.find(u =>\r\n          u.id !== targetUser.id &&\r\n          u.username.toLowerCase() === normalizedUsername\r\n        );\r\n        if (existingUser) {\r\n          throw new Error('Username already exists');\r\n        }\r\n      }\r\n\r\n      // Check for duplicate name and role if those fields are being changed\r\n      if ((updatedUser.fullName && updatedUser.fullName.trim() !== targetUser.fullName) ||\r\n          (updatedUser.role && updatedUser.role !== targetUser.role)) {\r\n        const existingNameAndRole = prevUsers.find(u =>\r\n          u.id !== targetUser.id &&\r\n          u.fullName.toLowerCase() === normalizedFullName &&\r\n          u.role === (updatedUser.role || targetUser.role)\r\n        );\r\n        if (existingNameAndRole) {\r\n          throw new Error('A user with this name and role already exists');\r\n        }\r\n      }\r\n\r\n      // Create a clean updated user object\r\n      const cleanUpdatedUser = {\r\n        ...targetUser, // Start with existing user data\r\n        ...updatedUser, // Apply updates\r\n        id: targetUser.id, // Ensure ID remains unchanged\r\n        updatedAt: new Date().toISOString()\r\n      };\r\n\r\n      // Trim string fields if they exist\r\n      if (cleanUpdatedUser.username) {\r\n        cleanUpdatedUser.username = cleanUpdatedUser.username.trim();\r\n      }\r\n      if (cleanUpdatedUser.fullName) {\r\n        cleanUpdatedUser.fullName = cleanUpdatedUser.fullName.trim();\r\n      }\r\n\r\n      // Update the specific user only\r\n      return prevUsers.map(user => {\r\n        if (user.id === targetUser.id) {\r\n          return cleanUpdatedUser;\r\n        }\r\n        return user;\r\n      });\r\n    });\r\n  };\r\n\r\n  return (\r\n    <UsersContext.Provider value={{\r\n      users,\r\n      addUser,\r\n      updateUser,\r\n    }}>\r\n      {children}\r\n    </UsersContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}