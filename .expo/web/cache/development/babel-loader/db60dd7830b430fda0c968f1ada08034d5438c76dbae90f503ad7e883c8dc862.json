{"ast":null,"code":"import _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { clientAPI } from \"../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar OpsContext = createContext();\nvar POLLING_INTERVAL = 30000;\nexport function OpsProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    notifications = _useState2[0],\n    setNotifications = _useState2[1];\n  var _useState3 = useState(0),\n    _useState4 = _slicedToArray(_useState3, 2),\n    unreadCount = _useState4[0],\n    setUnreadCount = _useState4[1];\n  var _useState5 = useState(false),\n    _useState6 = _slicedToArray(_useState5, 2),\n    loading = _useState6[0],\n    setLoading = _useState6[1];\n  useEffect(function () {\n    fetchNotifications();\n    var interval = setInterval(function () {\n      fetchNotifications();\n    }, POLLING_INTERVAL);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  var fetchNotifications = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        var response = yield clientAPI.notifications.getNotifications('ops_manager');\n        setNotifications(response);\n        setUnreadCount(response.filter(function (n) {\n          return !n.read;\n        }).length);\n      } catch (err) {\n        console.error('Failed to fetch ops manager notifications:', err);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function fetchNotifications() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var markNotificationsAsRead = function () {\n    var _ref3 = _asyncToGenerator(function* () {\n      try {\n        var unreadIds = notifications.filter(function (n) {\n          return !n.read;\n        }).map(function (n) {\n          return n.id;\n        });\n        if (unreadIds.length > 0) {\n          yield clientAPI.notifications.markAsRead(unreadIds, 'ops_manager');\n          yield fetchNotifications();\n        }\n      } catch (err) {\n        console.error('Failed to mark ops manager notifications as read:', err);\n      }\n    });\n    return function markNotificationsAsRead() {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var fetchUnreadCount = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      try {\n        var response = yield clientAPI.notifications.getNotifications('ops_manager');\n        setUnreadCount(response.filter(function (n) {\n          return !n.read;\n        }).length);\n      } catch (err) {\n        console.error('Failed to fetch ops manager unread count:', err);\n      }\n    });\n    return function fetchUnreadCount() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var clearNotifications = function clearNotifications() {\n    setNotifications([]);\n    setUnreadCount(0);\n  };\n  return _jsx(OpsContext.Provider, {\n    value: {\n      notifications: notifications,\n      unreadCount: unreadCount,\n      loading: loading,\n      markNotificationsAsRead: markNotificationsAsRead,\n      clearNotifications: clearNotifications,\n      fetchNotifications: fetchNotifications,\n      fetchUnreadCount: fetchUnreadCount\n    },\n    children: children\n  });\n}\nexport function useOps() {\n  var context = useContext(OpsContext);\n  if (!context) {\n    throw new Error('useOps must be used within an OpsProvider');\n  }\n  return context;\n}","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","clientAPI","jsx","_jsx","OpsContext","POLLING_INTERVAL","OpsProvider","_ref","children","_useState","_useState2","_slicedToArray","notifications","setNotifications","_useState3","_useState4","unreadCount","setUnreadCount","_useState5","_useState6","loading","setLoading","fetchNotifications","interval","setInterval","clearInterval","_ref2","_asyncToGenerator","response","getNotifications","filter","n","read","length","err","console","error","apply","arguments","markNotificationsAsRead","_ref3","unreadIds","map","id","markAsRead","fetchUnreadCount","_ref4","clearNotifications","Provider","value","useOps","context","Error"],"sources":["C:/Users/ajohn/loansiya-webapp1.3.4/src/contexts/OpsContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { clientAPI } from '../services/api';\r\n\r\nconst OpsContext = createContext();\r\n\r\nconst POLLING_INTERVAL = 30000; // 30 seconds\r\n\r\nexport function OpsProvider({ children }) {\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(false);\r\n\r\n  // Set up polling for ops manager notifications\r\n  useEffect(() => {\r\n    fetchNotifications(); // Initial fetch\r\n\r\n    const interval = setInterval(() => {\r\n      fetchNotifications();\r\n    }, POLLING_INTERVAL);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  // Fetch notifications from the server\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      setLoading(true);\r\n      const response = await clientAPI.notifications.getNotifications('ops_manager');\r\n      setNotifications(response);\r\n      setUnreadCount(response.filter(n => !n.read).length);\r\n    } catch (err) {\r\n      console.error('Failed to fetch ops manager notifications:', err);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const markNotificationsAsRead = async () => {\r\n    try {\r\n      const unreadIds = notifications.filter(n => !n.read).map(n => n.id);\r\n      if (unreadIds.length > 0) {\r\n        await clientAPI.notifications.markAsRead(unreadIds, 'ops_manager');\r\n        await fetchNotifications(); // Refresh notifications\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to mark ops manager notifications as read:', err);\r\n    }\r\n  };\r\n\r\n  const fetchUnreadCount = async () => {\r\n    try {\r\n      const response = await clientAPI.notifications.getNotifications('ops_manager');\r\n      setUnreadCount(response.filter(n => !n.read).length);\r\n    } catch (err) {\r\n      console.error('Failed to fetch ops manager unread count:', err);\r\n    }\r\n  };\r\n\r\n  const clearNotifications = () => {\r\n    // Note: This is now just a visual clear, as we're keeping notifications in the backend\r\n    setNotifications([]);\r\n    setUnreadCount(0);\r\n  };\r\n\r\n  return (\r\n    <OpsContext.Provider value={{\r\n      notifications,\r\n      unreadCount,\r\n      loading,\r\n      markNotificationsAsRead,\r\n      clearNotifications,\r\n      fetchNotifications, // Export this so components can manually refresh if needed\r\n      fetchUnreadCount // Export this to refresh just the unread count\r\n    }}>\r\n      {children}\r\n    </OpsContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useOps() {\r\n  const context = useContext(OpsContext);\r\n  if (!context) {\r\n    throw new Error('useOps must be used within an OpsProvider');\r\n  }\r\n  return context;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}