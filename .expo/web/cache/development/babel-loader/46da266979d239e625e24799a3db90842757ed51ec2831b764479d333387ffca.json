{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useState } from 'react';\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nexport var UsersContext = createContext({\n  users: [],\n  addUser: function addUser(user) {},\n  updateUser: function updateUser(user) {}\n});\nexport var UsersProvider = function UsersProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    users = _useState2[0],\n    setUsers = _useState2[1];\n  var addUser = function addUser(user) {\n    var existingUser = users.find(function (u) {\n      return u.username.toLowerCase() === user.username.toLowerCase();\n    });\n    if (existingUser) {\n      throw new Error('Username already exists');\n      return;\n    }\n    setUsers([].concat(_toConsumableArray(users), [_objectSpread(_objectSpread({}, user), {}, {\n      id: Date.now().toString(),\n      createdAt: new Date().toISOString()\n    })]));\n  };\n  var updateUser = function updateUser(updatedUser) {\n    if (!updatedUser.id) {\n      throw new Error('User ID is required for updating');\n    }\n    var targetUser = users.find(function (u) {\n      return u.id === updatedUser.id;\n    });\n    if (!targetUser) {\n      throw new Error('User not found');\n    }\n    if (updatedUser.username && targetUser.username !== updatedUser.username) {\n      var existingUser = users.find(function (u) {\n        return u.id !== updatedUser.id && u.username.toLowerCase() === updatedUser.username.toLowerCase();\n      });\n      if (existingUser) {\n        throw new Error('Username already exists');\n      }\n    }\n    setUsers(users.map(function (user) {\n      if (user.id === updatedUser.id) {\n        return _objectSpread(_objectSpread(_objectSpread({}, user), updatedUser), {}, {\n          updatedAt: new Date().toISOString()\n        });\n      }\n      return user;\n    }));\n  };\n  return _jsx(UsersContext.Provider, {\n    value: {\n      users: users,\n      addUser: addUser,\n      updateUser: updateUser\n    },\n    children: children\n  });\n};","map":{"version":3,"names":["React","createContext","useState","jsx","_jsx","UsersContext","users","addUser","user","updateUser","UsersProvider","_ref","children","_useState","_useState2","_slicedToArray","setUsers","existingUser","find","u","username","toLowerCase","Error","concat","_toConsumableArray","_objectSpread","id","Date","now","toString","createdAt","toISOString","updatedUser","targetUser","map","updatedAt","Provider","value"],"sources":["C:/Users/ajohn/loansiya-webapp1.1.0/src/contexts/UsersContext.js"],"sourcesContent":["import React, { createContext, useState } from 'react';\r\n\r\nexport const UsersContext = createContext({\r\n  users: [],\r\n  addUser: (user) => {},\r\n  updateUser: (user) => {},\r\n});\r\n\r\nexport const UsersProvider = ({ children }) => {\r\n  const [users, setUsers] = useState([]);\r\n\r\n  const addUser = (user) => {\r\n    // Check if username already exists\r\n    const existingUser = users.find(u => u.username.toLowerCase() === user.username.toLowerCase());\r\n    if (existingUser) {\r\n      throw new Error('Username already exists');\r\n      return;\r\n    }\r\n\r\n    setUsers([...users, {\r\n      ...user,\r\n      id: Date.now().toString(),\r\n      createdAt: new Date().toISOString()\r\n    }]);\r\n  };\r\n\r\n  const updateUser = (updatedUser) => {\r\n    if (!updatedUser.id) {\r\n      throw new Error('User ID is required for updating');\r\n    }\r\n    \r\n    // Find the target user by ID\r\n    const targetUser = users.find(u => u.id === updatedUser.id);\r\n    if (!targetUser) {\r\n      throw new Error('User not found');\r\n    }\r\n\r\n    // Only check for username duplicates if username is being changed\r\n    // Skip check if only updating status or other fields\r\n    if (updatedUser.username && targetUser.username !== updatedUser.username) {\r\n      const existingUser = users.find(u =>\r\n        u.id !== updatedUser.id &&\r\n        u.username.toLowerCase() === updatedUser.username.toLowerCase()\r\n      );\r\n      if (existingUser) {\r\n        throw new Error('Username already exists');\r\n      }\r\n    }\r\n\r\n    // Update the specific user only\r\n    setUsers(users.map(user => {\r\n      if (user.id === updatedUser.id) {\r\n        return {\r\n          ...user,\r\n          ...updatedUser,\r\n          updatedAt: new Date().toISOString()\r\n        };\r\n      }\r\n      return user;\r\n    }));\r\n  };\r\n\r\n  return (\r\n    <UsersContext.Provider value={{\r\n      users,\r\n      addUser,\r\n      updateUser,\r\n    }}>\r\n      {children}\r\n    </UsersContext.Provider>\r\n  );\r\n};"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}