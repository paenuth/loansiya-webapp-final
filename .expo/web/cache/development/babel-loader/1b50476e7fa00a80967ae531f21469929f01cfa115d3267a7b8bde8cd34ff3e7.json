{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { clientAPI } from \"../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar LoanContext = createContext();\nvar initialNotifications = [];\nexport function LoanProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    loans = _useState2[0],\n    setLoans = _useState2[1];\n  var _useState3 = useState(initialNotifications),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notifications = _useState4[0],\n    setNotifications = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    unreadCount = _useState6[0],\n    setUnreadCount = _useState6[1];\n  var _useState7 = useState(true),\n    _useState8 = _slicedToArray(_useState7, 2),\n    loading = _useState8[0],\n    setLoading = _useState8[1];\n  var _useState9 = useState(null),\n    _useState0 = _slicedToArray(_useState9, 2),\n    error = _useState0[0],\n    setError = _useState0[1];\n  useEffect(function () {\n    fetchClients();\n  }, []);\n  var fetchClients = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        setError(null);\n        var clientData = yield clientAPI.getAllClients();\n        setLoans(clientData);\n      } catch (err) {\n        setError(\"Failed to fetch clients: \" + err.message);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function fetchClients() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var refreshClientData = function () {\n    var _ref3 = _asyncToGenerator(function* (cid) {\n      try {\n        var updatedClient = yield clientAPI.getClientById(cid);\n        setLoans(function (prevLoans) {\n          return prevLoans.map(function (loan) {\n            return loan.cid === cid ? updatedClient : loan;\n          });\n        });\n        return updatedClient;\n      } catch (err) {\n        setError(\"Failed to refresh client: \" + err.message);\n        throw err;\n      }\n    });\n    return function refreshClientData(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var addNotification = function addNotification(notification) {\n    setNotifications(function (prev) {\n      return [_objectSpread({\n        id: Date.now(),\n        timestamp: new Date().toISOString(),\n        read: false\n      }, notification)].concat(_toConsumableArray(prev));\n    });\n    setUnreadCount(function (prev) {\n      return prev + 1;\n    });\n  };\n  var markNotificationsAsRead = function markNotificationsAsRead() {\n    setNotifications(function (prev) {\n      return prev.map(function (notif) {\n        return _objectSpread(_objectSpread({}, notif), {}, {\n          read: true\n        });\n      });\n    });\n    setUnreadCount(0);\n  };\n  var clearNotifications = function clearNotifications() {\n    setNotifications([]);\n    setUnreadCount(0);\n  };\n  var updateLoan = function () {\n    var _ref4 = _asyncToGenerator(function* (cid, updates) {\n      try {\n        var loan = loans.find(function (l) {\n          return l.cid === cid;\n        });\n        if (!loan) {\n          throw new Error(\"Loan not found for CID: \" + cid);\n        }\n        setLoans(function (prevLoans) {\n          return prevLoans.map(function (l) {\n            return l.cid === cid ? _objectSpread(_objectSpread({}, l), updates) : l;\n          });\n        });\n        if (updates.status === 'Approved' || updates.status === 'Declined') {\n          addNotification({\n            cid: cid,\n            clientName: loan.name,\n            type: 'status_change',\n            status: updates.status,\n            message: \"Loan request for client \" + loan.name + \" has been \" + updates.status.toLowerCase() + \" by Operations Manager\"\n          });\n        }\n        var updatedClient = yield refreshClientData(cid);\n        return updatedClient;\n      } catch (err) {\n        console.error('Failed to update loan:', err);\n        throw err;\n      }\n    });\n    return function updateLoan(_x2, _x3) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var updateLoanAmount = function () {\n    var _ref5 = _asyncToGenerator(function* (cid, newAmount) {\n      try {\n        var targetLoan = loans.find(function (l) {\n          return l.cid === cid;\n        });\n        if (!targetLoan) throw new Error('Client not found');\n        yield clientAPI.updateLoanAmount(cid, newAmount);\n        setLoans(function (prevLoans) {\n          return prevLoans.map(function (loan) {\n            if (loan.cid === cid) {\n              var updatedHistory = _toConsumableArray(loan.loans.loanHistory);\n              var latestRequestIndex = updatedHistory.findIndex(function (loan, _, arr) {\n                return new Date(loan.dateApplied).getTime() === Math.max.apply(Math, _toConsumableArray(arr.map(function (l) {\n                  return new Date(l.dateApplied).getTime();\n                })));\n              });\n              if (latestRequestIndex !== -1) {\n                updatedHistory[latestRequestIndex] = _objectSpread(_objectSpread({}, updatedHistory[latestRequestIndex]), {}, {\n                  amount: newAmount,\n                  decidedAt: new Date().toISOString()\n                });\n              }\n              return _objectSpread(_objectSpread({}, loan), {}, {\n                loans: _objectSpread(_objectSpread({}, loan.loans), {}, {\n                  loanHistory: updatedHistory\n                })\n              });\n            }\n            return loan;\n          });\n        });\n        addNotification({\n          cid: cid,\n          clientName: targetLoan.name,\n          type: 'amount_change',\n          amount: newAmount,\n          message: \"Loan amount for client \" + targetLoan.name + \" has been updated to \\u20B1\" + newAmount.toLocaleString() + \" by Operations Manager\"\n        });\n        return yield refreshClientData(cid);\n      } catch (err) {\n        console.error('Failed to update loan amount:', err);\n        throw err;\n      }\n    });\n    return function updateLoanAmount(_x4, _x5) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  return _jsx(LoanContext.Provider, {\n    value: {\n      loans: loans,\n      loading: loading,\n      error: error,\n      updateLoan: updateLoan,\n      updateLoanAmount: updateLoanAmount,\n      refreshClientData: refreshClientData,\n      notifications: notifications,\n      unreadCount: unreadCount,\n      markNotificationsAsRead: markNotificationsAsRead,\n      clearNotifications: clearNotifications\n    },\n    children: children\n  });\n}\nexport function useLoan() {\n  var context = useContext(LoanContext);\n  if (!context) {\n    throw new Error('useLoan must be used within a LoanProvider');\n  }\n  return context;\n}","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","clientAPI","jsx","_jsx","LoanContext","initialNotifications","LoanProvider","_ref","children","_useState","_useState2","_slicedToArray","loans","setLoans","_useState3","_useState4","notifications","setNotifications","_useState5","_useState6","unreadCount","setUnreadCount","_useState7","_useState8","loading","setLoading","_useState9","_useState0","error","setError","fetchClients","_ref2","_asyncToGenerator","clientData","getAllClients","err","message","apply","arguments","refreshClientData","_ref3","cid","updatedClient","getClientById","prevLoans","map","loan","_x","addNotification","notification","prev","_objectSpread","id","Date","now","timestamp","toISOString","read","concat","_toConsumableArray","markNotificationsAsRead","notif","clearNotifications","updateLoan","_ref4","updates","find","l","Error","status","clientName","name","type","toLowerCase","console","_x2","_x3","updateLoanAmount","_ref5","newAmount","targetLoan","updatedHistory","loanHistory","latestRequestIndex","findIndex","_","arr","dateApplied","getTime","Math","max","amount","decidedAt","toLocaleString","_x4","_x5","Provider","value","useLoan","context"],"sources":["C:/Users/ajohn/loansiya-webapp1.1.0/src/contexts/LoanContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { clientAPI } from '../services/api';\r\n\r\nconst LoanContext = createContext();\r\n\r\nconst initialNotifications = [];\r\n\r\nexport function LoanProvider({ children }) {\r\n  const [loans, setLoans] = useState([]);\r\n  const [notifications, setNotifications] = useState(initialNotifications);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch clients when component mounts\r\n  useEffect(() => {\r\n    fetchClients();\r\n  }, []);\r\n\r\n  const fetchClients = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const clientData = await clientAPI.getAllClients();\r\n      setLoans(clientData);\r\n    } catch (err) {\r\n      setError(`Failed to fetch clients: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const refreshClientData = async (cid) => {\r\n    try {\r\n      const updatedClient = await clientAPI.getClientById(cid);\r\n      setLoans(prevLoans =>\r\n        prevLoans.map(loan =>\r\n          loan.cid === cid ? updatedClient : loan\r\n        )\r\n      );\r\n      return updatedClient;\r\n    } catch (err) {\r\n      setError(`Failed to refresh client: ${err.message}`);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const addNotification = (notification) => {\r\n    setNotifications(prev => [{\r\n      id: Date.now(),\r\n      timestamp: new Date().toISOString(),\r\n      read: false,\r\n      ...notification\r\n    }, ...prev]);\r\n    setUnreadCount(prev => prev + 1);\r\n  };\r\n\r\n  const markNotificationsAsRead = () => {\r\n    setNotifications(prev => prev.map(notif => ({ ...notif, read: true })));\r\n    setUnreadCount(0);\r\n  };\r\n\r\n  const clearNotifications = () => {\r\n    setNotifications([]);\r\n    setUnreadCount(0);\r\n  };\r\n\r\n  const updateLoan = async (cid, updates) => {\r\n    try {\r\n      const loan = loans.find(l => l.cid === cid);\r\n      if (!loan) {\r\n        throw new Error(`Loan not found for CID: ${cid}`);\r\n      }\r\n\r\n      // Update local state\r\n      setLoans(prevLoans =>\r\n        prevLoans.map(l =>\r\n          l.cid === cid\r\n            ? { ...l, ...updates }\r\n            : l\r\n        )\r\n      );\r\n\r\n      // Add notification if status changed\r\n      if (updates.status === 'Approved' || updates.status === 'Declined') {\r\n        addNotification({\r\n          cid,\r\n          clientName: loan.name,\r\n          type: 'status_change',\r\n          status: updates.status,\r\n          message: `Loan request for client ${loan.name} has been ${updates.status.toLowerCase()} by Operations Manager`\r\n        });\r\n      }\r\n\r\n      // Refresh client data to ensure consistency\r\n      const updatedClient = await refreshClientData(cid);\r\n      return updatedClient;\r\n    } catch (err) {\r\n      console.error('Failed to update loan:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const updateLoanAmount = async (cid, newAmount) => {\r\n    try {\r\n      const targetLoan = loans.find(l => l.cid === cid);\r\n      if (!targetLoan) throw new Error('Client not found');\r\n\r\n      // Update amount in the API\r\n      await clientAPI.updateLoanAmount(cid, newAmount);\r\n\r\n      // Update local state after API success\r\n      setLoans(prevLoans =>\r\n        prevLoans.map(loan => {\r\n          if (loan.cid === cid) {\r\n            const updatedHistory = [...loan.loans.loanHistory];\r\n            const latestRequestIndex = updatedHistory.findIndex(\r\n              (loan, _, arr) =>\r\n                new Date(loan.dateApplied).getTime() ===\r\n                Math.max(...arr.map(l => new Date(l.dateApplied).getTime()))\r\n            );\r\n\r\n            if (latestRequestIndex !== -1) {\r\n              updatedHistory[latestRequestIndex] = {\r\n                ...updatedHistory[latestRequestIndex],\r\n                amount: newAmount,\r\n                decidedAt: new Date().toISOString()\r\n              };\r\n            }\r\n\r\n            return {\r\n              ...loan,\r\n              loans: {\r\n                ...loan.loans,\r\n                loanHistory: updatedHistory\r\n              }\r\n            };\r\n          }\r\n          return loan;\r\n        })\r\n      );\r\n\r\n      addNotification({\r\n        cid,\r\n        clientName: targetLoan.name,\r\n        type: 'amount_change',\r\n        amount: newAmount,\r\n        message: `Loan amount for client ${targetLoan.name} has been updated to ₱${newAmount.toLocaleString()} by Operations Manager`\r\n      });\r\n\r\n      return await refreshClientData(cid);\r\n    } catch (err) {\r\n      console.error('Failed to update loan amount:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <LoanContext.Provider value={{\r\n      loans,\r\n      loading,\r\n      error,\r\n      updateLoan,\r\n      updateLoanAmount,\r\n      refreshClientData,\r\n      notifications,\r\n      unreadCount,\r\n      markNotificationsAsRead,\r\n      clearNotifications\r\n    }}>\r\n      {children}\r\n    </LoanContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useLoan() {\r\n  const context = useContext(LoanContext);\r\n  if (!context) {\r\n    throw new Error('useLoan must be used within a LoanProvider');\r\n  }\r\n  return context;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}