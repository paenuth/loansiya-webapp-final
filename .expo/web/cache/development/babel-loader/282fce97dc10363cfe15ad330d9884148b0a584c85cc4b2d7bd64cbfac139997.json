{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/toConsumableArray\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nimport _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport React, { createContext, useState, useContext, useEffect } from 'react';\nimport { clientAPI } from \"../services/api\";\nimport { jsx as _jsx } from \"react/jsx-runtime\";\nvar LoanContext = createContext();\nvar POLLING_INTERVAL = 30000;\nexport function LoanProvider(_ref) {\n  var children = _ref.children;\n  var _useState = useState([]),\n    _useState2 = _slicedToArray(_useState, 2),\n    loans = _useState2[0],\n    setLoans = _useState2[1];\n  var _useState3 = useState([]),\n    _useState4 = _slicedToArray(_useState3, 2),\n    notifications = _useState4[0],\n    setNotifications = _useState4[1];\n  var _useState5 = useState(0),\n    _useState6 = _slicedToArray(_useState5, 2),\n    unreadCount = _useState6[0],\n    setUnreadCount = _useState6[1];\n  var _useState7 = useState(true),\n    _useState8 = _slicedToArray(_useState7, 2),\n    loading = _useState8[0],\n    setLoading = _useState8[1];\n  var _useState9 = useState(null),\n    _useState0 = _slicedToArray(_useState9, 2),\n    error = _useState0[0],\n    setError = _useState0[1];\n  useEffect(function () {\n    fetchClients();\n  }, []);\n  useEffect(function () {\n    fetchNotifications();\n    var interval = setInterval(function () {\n      fetchNotifications();\n    }, POLLING_INTERVAL);\n    return function () {\n      return clearInterval(interval);\n    };\n  }, []);\n  var fetchClients = function () {\n    var _ref2 = _asyncToGenerator(function* () {\n      try {\n        setLoading(true);\n        setError(null);\n        var clientData = yield clientAPI.getAllClients();\n        setLoans(clientData);\n      } catch (err) {\n        setError(\"Failed to fetch clients: \" + err.message);\n      } finally {\n        setLoading(false);\n      }\n    });\n    return function fetchClients() {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n  var refreshClientData = function () {\n    var _ref3 = _asyncToGenerator(function* (cid) {\n      try {\n        var updatedClient = yield clientAPI.getClientById(cid);\n        setLoans(function (prevLoans) {\n          return prevLoans.map(function (loan) {\n            return loan.cid === cid ? updatedClient : loan;\n          });\n        });\n        return updatedClient;\n      } catch (err) {\n        setError(\"Failed to refresh client: \" + err.message);\n        throw err;\n      }\n    });\n    return function refreshClientData(_x) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n  var fetchNotifications = function () {\n    var _ref4 = _asyncToGenerator(function* () {\n      try {\n        var response = yield clientAPI.notifications.getNotifications();\n        setNotifications(response);\n        setUnreadCount(response.filter(function (n) {\n          return !n.read;\n        }).length);\n      } catch (err) {\n        console.error('Failed to fetch notifications:', err);\n      }\n    });\n    return function fetchNotifications() {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n  var addNotification = function () {\n    var _ref5 = _asyncToGenerator(function* (notification) {\n      try {\n        yield clientAPI.notifications.createNotification(_objectSpread({\n          timestamp: new Date().toISOString(),\n          read: false\n        }, notification));\n        yield fetchNotifications();\n      } catch (err) {\n        console.error('Failed to create notification:', err);\n      }\n    });\n    return function addNotification(_x2) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n  var markNotificationsAsRead = function () {\n    var _ref6 = _asyncToGenerator(function* () {\n      try {\n        var unreadIds = notifications.filter(function (n) {\n          return !n.read;\n        }).map(function (n) {\n          return n.id;\n        });\n        if (unreadIds.length > 0) {\n          yield clientAPI.notifications.markAsRead(unreadIds);\n          yield fetchNotifications();\n        }\n      } catch (err) {\n        console.error('Failed to mark notifications as read:', err);\n      }\n    });\n    return function markNotificationsAsRead() {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n  var clearNotifications = function clearNotifications() {\n    setNotifications([]);\n    setUnreadCount(0);\n  };\n  var updateLoan = function () {\n    var _ref7 = _asyncToGenerator(function* (cid, updates) {\n      try {\n        var loan = loans.find(function (l) {\n          return l.cid === cid;\n        });\n        if (!loan) {\n          throw new Error(\"Loan not found for CID: \" + cid);\n        }\n        if (updates.forceRefresh) {\n          console.log('Force refreshing client data for CID:', cid);\n          var _updatedClient = yield refreshClientData(cid);\n          yield fetchClients();\n          return _updatedClient;\n        }\n        setLoans(function (prevLoans) {\n          return prevLoans.map(function (l) {\n            return l.cid === cid ? _objectSpread(_objectSpread({}, l), updates) : l;\n          });\n        });\n        if (updates.status === 'Approved' || updates.status === 'Declined') {\n          yield addNotification({\n            cid: cid,\n            clientName: loan.name,\n            type: 'status_change',\n            status: updates.status,\n            message: \"Loan request for client \" + loan.name + \" has been \" + updates.status.toLowerCase() + \" by Operations Manager\",\n            recipientRole: 'loan_officer'\n          });\n        }\n        var updatedClient = yield refreshClientData(cid);\n        return updatedClient;\n      } catch (err) {\n        console.error('Failed to update loan:', err);\n        throw err;\n      }\n    });\n    return function updateLoan(_x3, _x4) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n  var updateLoanAmount = function () {\n    var _ref8 = _asyncToGenerator(function* (cid, newAmount) {\n      try {\n        var targetLoan = loans.find(function (l) {\n          return l.cid === cid;\n        });\n        if (!targetLoan) throw new Error('Client not found');\n        yield clientAPI.updateLoanAmount(cid, newAmount);\n        setLoans(function (prevLoans) {\n          return prevLoans.map(function (loan) {\n            if (loan.cid === cid) {\n              var updatedHistory = _toConsumableArray(loan.loans.loanHistory);\n              var latestRequestIndex = updatedHistory.findIndex(function (loan, _, arr) {\n                return new Date(loan.dateApplied).getTime() === Math.max.apply(Math, _toConsumableArray(arr.map(function (l) {\n                  return new Date(l.dateApplied).getTime();\n                })));\n              });\n              if (latestRequestIndex !== -1) {\n                updatedHistory[latestRequestIndex] = _objectSpread(_objectSpread({}, updatedHistory[latestRequestIndex]), {}, {\n                  amount: newAmount,\n                  decidedAt: new Date().toISOString()\n                });\n              }\n              return _objectSpread(_objectSpread({}, loan), {}, {\n                loans: _objectSpread(_objectSpread({}, loan.loans), {}, {\n                  loanHistory: updatedHistory\n                })\n              });\n            }\n            return loan;\n          });\n        });\n        yield addNotification({\n          cid: cid,\n          clientName: targetLoan.name,\n          type: 'amount_change',\n          amount: newAmount,\n          message: \"Loan amount for client \" + targetLoan.name + \" has been updated to \\u20B1\" + newAmount.toLocaleString() + \" by Operations Manager\",\n          recipientRole: 'loan_officer'\n        });\n        return yield refreshClientData(cid);\n      } catch (err) {\n        console.error('Failed to update loan amount:', err);\n        throw err;\n      }\n    });\n    return function updateLoanAmount(_x5, _x6) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  return _jsx(LoanContext.Provider, {\n    value: {\n      loans: loans,\n      loading: loading,\n      error: error,\n      updateLoan: updateLoan,\n      updateLoanAmount: updateLoanAmount,\n      refreshClientData: refreshClientData,\n      notifications: notifications,\n      unreadCount: unreadCount,\n      markNotificationsAsRead: markNotificationsAsRead,\n      clearNotifications: clearNotifications,\n      fetchNotifications: fetchNotifications\n    },\n    children: children\n  });\n}\nexport function useLoan() {\n  var context = useContext(LoanContext);\n  if (!context) {\n    throw new Error('useLoan must be used within a LoanProvider');\n  }\n  return context;\n}","map":{"version":3,"names":["React","createContext","useState","useContext","useEffect","clientAPI","jsx","_jsx","LoanContext","POLLING_INTERVAL","LoanProvider","_ref","children","_useState","_useState2","_slicedToArray","loans","setLoans","_useState3","_useState4","notifications","setNotifications","_useState5","_useState6","unreadCount","setUnreadCount","_useState7","_useState8","loading","setLoading","_useState9","_useState0","error","setError","fetchClients","fetchNotifications","interval","setInterval","clearInterval","_ref2","_asyncToGenerator","clientData","getAllClients","err","message","apply","arguments","refreshClientData","_ref3","cid","updatedClient","getClientById","prevLoans","map","loan","_x","_ref4","response","getNotifications","filter","n","read","length","console","addNotification","_ref5","notification","createNotification","_objectSpread","timestamp","Date","toISOString","_x2","markNotificationsAsRead","_ref6","unreadIds","id","markAsRead","clearNotifications","updateLoan","_ref7","updates","find","l","Error","forceRefresh","log","status","clientName","name","type","toLowerCase","recipientRole","_x3","_x4","updateLoanAmount","_ref8","newAmount","targetLoan","updatedHistory","_toConsumableArray","loanHistory","latestRequestIndex","findIndex","_","arr","dateApplied","getTime","Math","max","amount","decidedAt","toLocaleString","_x5","_x6","Provider","value","useLoan","context"],"sources":["C:/Users/ajohn/loansiya-webapp1.3.4/src/contexts/LoanContext.js"],"sourcesContent":["import React, { createContext, useState, useContext, useEffect } from 'react';\r\nimport { clientAPI } from '../services/api';\r\n\r\nconst LoanContext = createContext();\r\n\r\nconst POLLING_INTERVAL = 30000; // 30 seconds\r\n\r\nexport function LoanProvider({ children }) {\r\n  const [loans, setLoans] = useState([]);\r\n  const [notifications, setNotifications] = useState([]);\r\n  const [unreadCount, setUnreadCount] = useState(0);\r\n  const [loading, setLoading] = useState(true);\r\n  const [error, setError] = useState(null);\r\n\r\n  // Fetch clients when component mounts\r\n  useEffect(() => {\r\n    fetchClients();\r\n  }, []);\r\n\r\n  // Set up polling for notifications\r\n  useEffect(() => {\r\n    fetchNotifications(); // Initial fetch\r\n\r\n    const interval = setInterval(() => {\r\n      fetchNotifications();\r\n    }, POLLING_INTERVAL);\r\n\r\n    return () => clearInterval(interval);\r\n  }, []);\r\n\r\n  const fetchClients = async () => {\r\n    try {\r\n      setLoading(true);\r\n      setError(null);\r\n      const clientData = await clientAPI.getAllClients();\r\n      setLoans(clientData);\r\n    } catch (err) {\r\n      setError(`Failed to fetch clients: ${err.message}`);\r\n    } finally {\r\n      setLoading(false);\r\n    }\r\n  };\r\n\r\n  const refreshClientData = async (cid) => {\r\n    try {\r\n      const updatedClient = await clientAPI.getClientById(cid);\r\n      setLoans(prevLoans =>\r\n        prevLoans.map(loan =>\r\n          loan.cid === cid ? updatedClient : loan\r\n        )\r\n      );\r\n      return updatedClient;\r\n    } catch (err) {\r\n      setError(`Failed to refresh client: ${err.message}`);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  // Fetch notifications from the server\r\n  const fetchNotifications = async () => {\r\n    try {\r\n      const response = await clientAPI.notifications.getNotifications();\r\n      setNotifications(response);\r\n      setUnreadCount(response.filter(n => !n.read).length);\r\n    } catch (err) {\r\n      console.error('Failed to fetch notifications:', err);\r\n    }\r\n  };\r\n\r\n  const addNotification = async (notification) => {\r\n    try {\r\n      await clientAPI.notifications.createNotification({\r\n        timestamp: new Date().toISOString(),\r\n        read: false,\r\n        ...notification\r\n      });\r\n      await fetchNotifications(); // Refresh notifications\r\n    } catch (err) {\r\n      console.error('Failed to create notification:', err);\r\n    }\r\n  };\r\n\r\n  const markNotificationsAsRead = async () => {\r\n    try {\r\n      const unreadIds = notifications.filter(n => !n.read).map(n => n.id);\r\n      if (unreadIds.length > 0) {\r\n        await clientAPI.notifications.markAsRead(unreadIds);\r\n        await fetchNotifications(); // Refresh notifications\r\n      }\r\n    } catch (err) {\r\n      console.error('Failed to mark notifications as read:', err);\r\n    }\r\n  };\r\n\r\n  const clearNotifications = () => {\r\n    // Note: This is now just a visual clear, as we're keeping notifications in the backend\r\n    setNotifications([]);\r\n    setUnreadCount(0);\r\n  };\r\n\r\n  const updateLoan = async (cid, updates) => {\r\n    try {\r\n      const loan = loans.find(l => l.cid === cid);\r\n      if (!loan) {\r\n        throw new Error(`Loan not found for CID: ${cid}`);\r\n      }\r\n\r\n      // If forceRefresh is true, skip local update and go straight to refresh\r\n      if (updates.forceRefresh) {\r\n        console.log('Force refreshing client data for CID:', cid);\r\n        const updatedClient = await refreshClientData(cid);\r\n        \r\n        // Also refresh all clients to ensure the list is up to date\r\n        await fetchClients();\r\n        \r\n        return updatedClient;\r\n      }\r\n\r\n      // Update local state\r\n      setLoans(prevLoans =>\r\n        prevLoans.map(l =>\r\n          l.cid === cid\r\n            ? { ...l, ...updates }\r\n            : l\r\n        )\r\n      );\r\n\r\n      // Create notification in backend if status changed\r\n      if (updates.status === 'Approved' || updates.status === 'Declined') {\r\n        await addNotification({\r\n          cid,\r\n          clientName: loan.name,\r\n          type: 'status_change',\r\n          status: updates.status,\r\n          message: `Loan request for client ${loan.name} has been ${updates.status.toLowerCase()} by Operations Manager`,\r\n          recipientRole: 'loan_officer' // Specify that this is for loan officers\r\n        });\r\n      }\r\n\r\n      // Refresh client data to ensure consistency\r\n      const updatedClient = await refreshClientData(cid);\r\n      return updatedClient;\r\n    } catch (err) {\r\n      console.error('Failed to update loan:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  const updateLoanAmount = async (cid, newAmount) => {\r\n    try {\r\n      const targetLoan = loans.find(l => l.cid === cid);\r\n      if (!targetLoan) throw new Error('Client not found');\r\n\r\n      // Update amount in the API\r\n      await clientAPI.updateLoanAmount(cid, newAmount);\r\n\r\n      // Update local state after API success\r\n      setLoans(prevLoans =>\r\n        prevLoans.map(loan => {\r\n          if (loan.cid === cid) {\r\n            const updatedHistory = [...loan.loans.loanHistory];\r\n            const latestRequestIndex = updatedHistory.findIndex(\r\n              (loan, _, arr) =>\r\n                new Date(loan.dateApplied).getTime() ===\r\n                Math.max(...arr.map(l => new Date(l.dateApplied).getTime()))\r\n            );\r\n\r\n            if (latestRequestIndex !== -1) {\r\n              updatedHistory[latestRequestIndex] = {\r\n                ...updatedHistory[latestRequestIndex],\r\n                amount: newAmount,\r\n                decidedAt: new Date().toISOString()\r\n              };\r\n            }\r\n\r\n            return {\r\n              ...loan,\r\n              loans: {\r\n                ...loan.loans,\r\n                loanHistory: updatedHistory\r\n              }\r\n            };\r\n          }\r\n          return loan;\r\n        })\r\n      );\r\n\r\n      // Create notification in backend\r\n      await addNotification({\r\n        cid,\r\n        clientName: targetLoan.name,\r\n        type: 'amount_change',\r\n        amount: newAmount,\r\n        message: `Loan amount for client ${targetLoan.name} has been updated to ₱${newAmount.toLocaleString()} by Operations Manager`,\r\n        recipientRole: 'loan_officer'\r\n      });\r\n\r\n      return await refreshClientData(cid);\r\n    } catch (err) {\r\n      console.error('Failed to update loan amount:', err);\r\n      throw err;\r\n    }\r\n  };\r\n\r\n  return (\r\n    <LoanContext.Provider value={{\r\n      loans,\r\n      loading,\r\n      error,\r\n      updateLoan,\r\n      updateLoanAmount,\r\n      refreshClientData,\r\n      notifications,\r\n      unreadCount,\r\n      markNotificationsAsRead,\r\n      clearNotifications,\r\n      fetchNotifications // Export this so components can manually refresh if needed\r\n    }}>\r\n      {children}\r\n    </LoanContext.Provider>\r\n  );\r\n}\r\n\r\nexport function useLoan() {\r\n  const context = useContext(LoanContext);\r\n  if (!context) {\r\n    throw new Error('useLoan must be used within a LoanProvider');\r\n  }\r\n  return context;\r\n}"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}