{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _asyncToGenerator from \"@babel/runtime/helpers/asyncToGenerator\";\nfunction ownKeys(e, r) { var t = Object.keys(e); if (Object.getOwnPropertySymbols) { var o = Object.getOwnPropertySymbols(e); r && (o = o.filter(function (r) { return Object.getOwnPropertyDescriptor(e, r).enumerable; })), t.push.apply(t, o); } return t; }\nfunction _objectSpread(e) { for (var r = 1; r < arguments.length; r++) { var t = null != arguments[r] ? arguments[r] : {}; r % 2 ? ownKeys(Object(t), !0).forEach(function (r) { _defineProperty(e, r, t[r]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(e, Object.getOwnPropertyDescriptors(t)) : ownKeys(Object(t)).forEach(function (r) { Object.defineProperty(e, r, Object.getOwnPropertyDescriptor(t, r)); }); } return e; }\nimport { clientAPI } from \"../services/api\";\nexport var loadApplicationDocumentDates = function () {\n  var _ref = _asyncToGenerator(function* (cid) {\n    try {\n      var dates = yield clientAPI.getDocumentDates(cid);\n      var filteredDates = [];\n      for (var dateInfo of dates) {\n        var documents = yield clientAPI.getDocumentsByDate(cid, dateInfo.date);\n        var applicationDocs = documents.filter(function (doc) {\n          return !['pdf', 'promissory-note'].some(function (keyword) {\n            return doc.type.includes(keyword) || doc.name.toLowerCase().includes(keyword) || doc.displayName.toLowerCase().includes(keyword);\n          });\n        });\n        if (applicationDocs.length > 0) {\n          filteredDates.push(_objectSpread(_objectSpread({}, dateInfo), {}, {\n            documentCount: applicationDocs.length\n          }));\n        }\n      }\n      return filteredDates;\n    } catch (error) {\n      console.error('Error loading document dates:', error);\n      throw new Error('Failed to load document dates');\n    }\n  });\n  return function loadApplicationDocumentDates(_x) {\n    return _ref.apply(this, arguments);\n  };\n}();\nexport var loadSignedDocumentDates = function () {\n  var _ref2 = _asyncToGenerator(function* (cid) {\n    try {\n      var dates = yield clientAPI.getDocumentDates(cid);\n      var datesWithSignedDocs = [];\n      for (var dateInfo of dates) {\n        var documents = yield clientAPI.getDocumentsByDate(cid, dateInfo.date);\n        console.log(\"Checking documents for date \" + dateInfo.date + \":\", documents);\n        var signedDocs = documents.filter(function (doc) {\n          var name = (doc.name || '').toLowerCase();\n          var displayName = (doc.displayName || '').toLowerCase();\n          var type = (doc.type || '').toLowerCase();\n          var isPDF = type.includes('pdf') || name.endsWith('.pdf') || displayName.endsWith('.pdf');\n          var isPromissoryNote = name.includes('promissory-note') || displayName.includes('promissory note');\n          console.log(\"Document \" + name + \":\", {\n            isPDF: isPDF,\n            isPromissoryNote: isPromissoryNote,\n            type: type,\n            name: name,\n            displayName: displayName\n          });\n          return isPDF || isPromissoryNote;\n        });\n        console.log(\"Found \" + signedDocs.length + \" signed docs for \" + dateInfo.date + \":\", signedDocs);\n        if (signedDocs.length > 0) {\n          datesWithSignedDocs.push(_objectSpread(_objectSpread({}, dateInfo), {}, {\n            documentCount: signedDocs.length\n          }));\n        }\n      }\n      return datesWithSignedDocs;\n    } catch (error) {\n      console.error('Error loading signed document dates:', error);\n      throw new Error('Failed to load signed document dates');\n    }\n  });\n  return function loadSignedDocumentDates(_x2) {\n    return _ref2.apply(this, arguments);\n  };\n}();\nexport var getApplicationDocuments = function () {\n  var _ref3 = _asyncToGenerator(function* (cid, selectedDate) {\n    try {\n      var documents = yield clientAPI.getDocumentsByDate(cid, selectedDate);\n      return documents.filter(function (doc) {\n        return !['pdf', 'promissory-note'].some(function (keyword) {\n          return doc.type.includes(keyword) || doc.name.toLowerCase().includes(keyword) || doc.displayName.toLowerCase().includes(keyword);\n        });\n      });\n    } catch (error) {\n      console.error('Error loading documents:', error);\n      throw new Error('Failed to load application documents');\n    }\n  });\n  return function getApplicationDocuments(_x3, _x4) {\n    return _ref3.apply(this, arguments);\n  };\n}();\nexport var getSignedDocuments = function () {\n  var _ref4 = _asyncToGenerator(function* (cid, selectedDate) {\n    try {\n      var documents = yield clientAPI.getDocumentsByDate(cid, selectedDate);\n      return documents.filter(function (doc) {\n        var name = doc.name.toLowerCase();\n        var displayName = doc.displayName.toLowerCase();\n        return doc.type.includes('pdf') || name.endsWith('.pdf') || displayName.endsWith('.pdf') || name.includes('promissory-note') || displayName.includes('promissory note');\n      });\n    } catch (error) {\n      console.error('Error loading signed documents:', error);\n      throw new Error('Failed to load signed documents');\n    }\n  });\n  return function getSignedDocuments(_x5, _x6) {\n    return _ref4.apply(this, arguments);\n  };\n}();","map":{"version":3,"names":["clientAPI","loadApplicationDocumentDates","_ref","_asyncToGenerator","cid","dates","getDocumentDates","filteredDates","dateInfo","documents","getDocumentsByDate","date","applicationDocs","filter","doc","some","keyword","type","includes","name","toLowerCase","displayName","length","push","_objectSpread","documentCount","error","console","Error","_x","apply","arguments","loadSignedDocumentDates","_ref2","datesWithSignedDocs","log","signedDocs","isPDF","endsWith","isPromissoryNote","_x2","getApplicationDocuments","_ref3","selectedDate","_x3","_x4","getSignedDocuments","_ref4","_x5","_x6"],"sources":["C:/Users/ajohn/loansiya-webapp1.3.4/src/utils/documentHandlers.js"],"sourcesContent":["import { clientAPI } from '../services/api';\r\n\r\nexport const loadApplicationDocumentDates = async (cid) => {\r\n  try {\r\n    const dates = await clientAPI.getDocumentDates(cid);\r\n    const filteredDates = [];\r\n    \r\n    for (const dateInfo of dates) {\r\n      const documents = await clientAPI.getDocumentsByDate(cid, dateInfo.date);\r\n      const applicationDocs = documents.filter(doc =>\r\n        !['pdf', 'promissory-note'].some(keyword =>\r\n          doc.type.includes(keyword) ||\r\n          doc.name.toLowerCase().includes(keyword) ||\r\n          doc.displayName.toLowerCase().includes(keyword)\r\n        )\r\n      );\r\n    \r\n      if (applicationDocs.length > 0) {\r\n        filteredDates.push({\r\n          ...dateInfo,\r\n          documentCount: applicationDocs.length\r\n        });\r\n      }\r\n    }\r\n    return filteredDates;\r\n  } catch (error) {\r\n    console.error('Error loading document dates:', error);\r\n    throw new Error('Failed to load document dates');\r\n  }\r\n};\r\n\r\nexport const loadSignedDocumentDates = async (cid) => {\r\n  try {\r\n    const dates = await clientAPI.getDocumentDates(cid);\r\n    const datesWithSignedDocs = [];\r\n    \r\n    for (const dateInfo of dates) {\r\n      const documents = await clientAPI.getDocumentsByDate(cid, dateInfo.date);\r\n      console.log(`Checking documents for date ${dateInfo.date}:`, documents);\r\n      \r\n      const signedDocs = documents.filter(doc => {\r\n        const name = (doc.name || '').toLowerCase();\r\n        const displayName = (doc.displayName || '').toLowerCase();\r\n        const type = (doc.type || '').toLowerCase();\r\n        \r\n        const isPDF = type.includes('pdf') ||\r\n          name.endsWith('.pdf') ||\r\n          displayName.endsWith('.pdf');\r\n          \r\n        const isPromissoryNote = name.includes('promissory-note') ||\r\n          displayName.includes('promissory note');\r\n        \r\n        console.log(`Document ${name}:`, {\r\n          isPDF,\r\n          isPromissoryNote,\r\n          type,\r\n          name,\r\n          displayName\r\n        });\r\n        \r\n        return isPDF || isPromissoryNote;\r\n      });\r\n      \r\n      console.log(`Found ${signedDocs.length} signed docs for ${dateInfo.date}:`, signedDocs);\r\n      \r\n      if (signedDocs.length > 0) {\r\n        datesWithSignedDocs.push({\r\n          ...dateInfo,\r\n          documentCount: signedDocs.length\r\n        });\r\n      }\r\n    }\r\n    return datesWithSignedDocs;\r\n  } catch (error) {\r\n    console.error('Error loading signed document dates:', error);\r\n    throw new Error('Failed to load signed document dates');\r\n  }\r\n};\r\n\r\nexport const getApplicationDocuments = async (cid, selectedDate) => {\r\n  try {\r\n    const documents = await clientAPI.getDocumentsByDate(cid, selectedDate);\r\n    return documents.filter(doc =>\r\n      !['pdf', 'promissory-note'].some(keyword =>\r\n        doc.type.includes(keyword) ||\r\n        doc.name.toLowerCase().includes(keyword) ||\r\n        doc.displayName.toLowerCase().includes(keyword)\r\n      )\r\n    );\r\n  } catch (error) {\r\n    console.error('Error loading documents:', error);\r\n    throw new Error('Failed to load application documents');\r\n  }\r\n};\r\n\r\nexport const getSignedDocuments = async (cid, selectedDate) => {\r\n  try {\r\n    const documents = await clientAPI.getDocumentsByDate(cid, selectedDate);\r\n    return documents.filter(doc => {\r\n      const name = doc.name.toLowerCase();\r\n      const displayName = doc.displayName.toLowerCase();\r\n      return doc.type.includes('pdf') ||\r\n        name.endsWith('.pdf') ||\r\n        displayName.endsWith('.pdf') ||\r\n        name.includes('promissory-note') ||\r\n        displayName.includes('promissory note');\r\n    });\r\n  } catch (error) {\r\n    console.error('Error loading signed documents:', error);\r\n    throw new Error('Failed to load signed documents');\r\n  }\r\n};"],"mappings":";;;;AAAA,SAASA,SAAS;AAElB,OAAO,IAAMC,4BAA4B;EAAA,IAAAC,IAAA,GAAAC,iBAAA,CAAG,WAAOC,GAAG,EAAK;IACzD,IAAI;MACF,IAAMC,KAAK,SAASL,SAAS,CAACM,gBAAgB,CAACF,GAAG,CAAC;MACnD,IAAMG,aAAa,GAAG,EAAE;MAExB,KAAK,IAAMC,QAAQ,IAAIH,KAAK,EAAE;QAC5B,IAAMI,SAAS,SAAST,SAAS,CAACU,kBAAkB,CAACN,GAAG,EAAEI,QAAQ,CAACG,IAAI,CAAC;QACxE,IAAMC,eAAe,GAAGH,SAAS,CAACI,MAAM,CAAC,UAAAC,GAAG;UAAA,OAC1C,CAAC,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAACC,IAAI,CAAC,UAAAC,OAAO;YAAA,OACtCF,GAAG,CAACG,IAAI,CAACC,QAAQ,CAACF,OAAO,CAAC,IAC1BF,GAAG,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC,CAACF,QAAQ,CAACF,OAAO,CAAC,IACxCF,GAAG,CAACO,WAAW,CAACD,WAAW,CAAC,CAAC,CAACF,QAAQ,CAACF,OAAO,CAAC;UAAA,CACjD,CAAC;QAAA,CACH,CAAC;QAED,IAAIJ,eAAe,CAACU,MAAM,GAAG,CAAC,EAAE;UAC9Bf,aAAa,CAACgB,IAAI,CAAAC,aAAA,CAAAA,aAAA,KACbhB,QAAQ;YACXiB,aAAa,EAAEb,eAAe,CAACU;UAAM,EACtC,CAAC;QACJ;MACF;MACA,OAAOf,aAAa;IACtB,CAAC,CAAC,OAAOmB,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,+BAA+B,EAAEA,KAAK,CAAC;MACrD,MAAM,IAAIE,KAAK,CAAC,+BAA+B,CAAC;IAClD;EACF,CAAC;EAAA,gBA3BY3B,4BAA4BA,CAAA4B,EAAA;IAAA,OAAA3B,IAAA,CAAA4B,KAAA,OAAAC,SAAA;EAAA;AAAA,GA2BxC;AAED,OAAO,IAAMC,uBAAuB;EAAA,IAAAC,KAAA,GAAA9B,iBAAA,CAAG,WAAOC,GAAG,EAAK;IACpD,IAAI;MACF,IAAMC,KAAK,SAASL,SAAS,CAACM,gBAAgB,CAACF,GAAG,CAAC;MACnD,IAAM8B,mBAAmB,GAAG,EAAE;MAE9B,KAAK,IAAM1B,QAAQ,IAAIH,KAAK,EAAE;QAC5B,IAAMI,SAAS,SAAST,SAAS,CAACU,kBAAkB,CAACN,GAAG,EAAEI,QAAQ,CAACG,IAAI,CAAC;QACxEgB,OAAO,CAACQ,GAAG,kCAAgC3B,QAAQ,CAACG,IAAI,QAAKF,SAAS,CAAC;QAEvE,IAAM2B,UAAU,GAAG3B,SAAS,CAACI,MAAM,CAAC,UAAAC,GAAG,EAAI;UACzC,IAAMK,IAAI,GAAG,CAACL,GAAG,CAACK,IAAI,IAAI,EAAE,EAAEC,WAAW,CAAC,CAAC;UAC3C,IAAMC,WAAW,GAAG,CAACP,GAAG,CAACO,WAAW,IAAI,EAAE,EAAED,WAAW,CAAC,CAAC;UACzD,IAAMH,IAAI,GAAG,CAACH,GAAG,CAACG,IAAI,IAAI,EAAE,EAAEG,WAAW,CAAC,CAAC;UAE3C,IAAMiB,KAAK,GAAGpB,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,IAChCC,IAAI,CAACmB,QAAQ,CAAC,MAAM,CAAC,IACrBjB,WAAW,CAACiB,QAAQ,CAAC,MAAM,CAAC;UAE9B,IAAMC,gBAAgB,GAAGpB,IAAI,CAACD,QAAQ,CAAC,iBAAiB,CAAC,IACvDG,WAAW,CAACH,QAAQ,CAAC,iBAAiB,CAAC;UAEzCS,OAAO,CAACQ,GAAG,eAAahB,IAAI,QAAK;YAC/BkB,KAAK,EAALA,KAAK;YACLE,gBAAgB,EAAhBA,gBAAgB;YAChBtB,IAAI,EAAJA,IAAI;YACJE,IAAI,EAAJA,IAAI;YACJE,WAAW,EAAXA;UACF,CAAC,CAAC;UAEF,OAAOgB,KAAK,IAAIE,gBAAgB;QAClC,CAAC,CAAC;QAEFZ,OAAO,CAACQ,GAAG,YAAUC,UAAU,CAACd,MAAM,yBAAoBd,QAAQ,CAACG,IAAI,QAAKyB,UAAU,CAAC;QAEvF,IAAIA,UAAU,CAACd,MAAM,GAAG,CAAC,EAAE;UACzBY,mBAAmB,CAACX,IAAI,CAAAC,aAAA,CAAAA,aAAA,KACnBhB,QAAQ;YACXiB,aAAa,EAAEW,UAAU,CAACd;UAAM,EACjC,CAAC;QACJ;MACF;MACA,OAAOY,mBAAmB;IAC5B,CAAC,CAAC,OAAOR,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,sCAAsC,EAAEA,KAAK,CAAC;MAC5D,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;IACzD;EACF,CAAC;EAAA,gBA9CYI,uBAAuBA,CAAAQ,GAAA;IAAA,OAAAP,KAAA,CAAAH,KAAA,OAAAC,SAAA;EAAA;AAAA,GA8CnC;AAED,OAAO,IAAMU,uBAAuB;EAAA,IAAAC,KAAA,GAAAvC,iBAAA,CAAG,WAAOC,GAAG,EAAEuC,YAAY,EAAK;IAClE,IAAI;MACF,IAAMlC,SAAS,SAAST,SAAS,CAACU,kBAAkB,CAACN,GAAG,EAAEuC,YAAY,CAAC;MACvE,OAAOlC,SAAS,CAACI,MAAM,CAAC,UAAAC,GAAG;QAAA,OACzB,CAAC,CAAC,KAAK,EAAE,iBAAiB,CAAC,CAACC,IAAI,CAAC,UAAAC,OAAO;UAAA,OACtCF,GAAG,CAACG,IAAI,CAACC,QAAQ,CAACF,OAAO,CAAC,IAC1BF,GAAG,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC,CAACF,QAAQ,CAACF,OAAO,CAAC,IACxCF,GAAG,CAACO,WAAW,CAACD,WAAW,CAAC,CAAC,CAACF,QAAQ,CAACF,OAAO,CAAC;QAAA,CACjD,CAAC;MAAA,CACH,CAAC;IACH,CAAC,CAAC,OAAOU,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,0BAA0B,EAAEA,KAAK,CAAC;MAChD,MAAM,IAAIE,KAAK,CAAC,sCAAsC,CAAC;IACzD;EACF,CAAC;EAAA,gBAdYa,uBAAuBA,CAAAG,GAAA,EAAAC,GAAA;IAAA,OAAAH,KAAA,CAAAZ,KAAA,OAAAC,SAAA;EAAA;AAAA,GAcnC;AAED,OAAO,IAAMe,kBAAkB;EAAA,IAAAC,KAAA,GAAA5C,iBAAA,CAAG,WAAOC,GAAG,EAAEuC,YAAY,EAAK;IAC7D,IAAI;MACF,IAAMlC,SAAS,SAAST,SAAS,CAACU,kBAAkB,CAACN,GAAG,EAAEuC,YAAY,CAAC;MACvE,OAAOlC,SAAS,CAACI,MAAM,CAAC,UAAAC,GAAG,EAAI;QAC7B,IAAMK,IAAI,GAAGL,GAAG,CAACK,IAAI,CAACC,WAAW,CAAC,CAAC;QACnC,IAAMC,WAAW,GAAGP,GAAG,CAACO,WAAW,CAACD,WAAW,CAAC,CAAC;QACjD,OAAON,GAAG,CAACG,IAAI,CAACC,QAAQ,CAAC,KAAK,CAAC,IAC7BC,IAAI,CAACmB,QAAQ,CAAC,MAAM,CAAC,IACrBjB,WAAW,CAACiB,QAAQ,CAAC,MAAM,CAAC,IAC5BnB,IAAI,CAACD,QAAQ,CAAC,iBAAiB,CAAC,IAChCG,WAAW,CAACH,QAAQ,CAAC,iBAAiB,CAAC;MAC3C,CAAC,CAAC;IACJ,CAAC,CAAC,OAAOQ,KAAK,EAAE;MACdC,OAAO,CAACD,KAAK,CAAC,iCAAiC,EAAEA,KAAK,CAAC;MACvD,MAAM,IAAIE,KAAK,CAAC,iCAAiC,CAAC;IACpD;EACF,CAAC;EAAA,gBAhBYkB,kBAAkBA,CAAAE,GAAA,EAAAC,GAAA;IAAA,OAAAF,KAAA,CAAAjB,KAAA,OAAAC,SAAA;EAAA;AAAA,GAgB9B","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}